
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001870  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000320  00001870  00001870  000018c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00001b90  00001b90  00001be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000ac  00001ba4  00001ba4  00001bf8  2**2
                  ALLOC
  4 .debug_frame  00000454  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002979  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ac  00000000  00000000  000049c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000089d  00000000  00000000  00005371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a8  00000000  00000000  00005c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c8  00000000  00000000  00005cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002f6b  00000000  00000000  00005d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006bd  00000000  00000000  00008ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000093a6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 02 7e 	calli ac4 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c ff fc 	ori sp,sp,0xfffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 1b b0 	ori gp,gp,0x1bb0
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 1b a4 	ori r1,r1,0x1ba4
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 1c 50 	ori r3,r3,0x1c50

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 e5 	calli 4d0 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <_Z11instruccion3armc>:
int inst;
int dir;
int val;
int adr;

void instruccion(arm y,char x){
     208:	37 9c ff dc 	addi sp,sp,-36
     20c:	5b 9d 00 04 	sw (sp+4),ra
     210:	43 89 00 2b 	lbu r9,(sp+43)
     214:	5b 81 00 08 	sw (sp+8),r1
     218:	5b 82 00 0c 	sw (sp+12),r2
     21c:	5b 83 00 10 	sw (sp+16),r3
     220:	5b 84 00 14 	sw (sp+20),r4
     224:	5b 85 00 18 	sw (sp+24),r5
     228:	5b 86 00 1c 	sw (sp+28),r6
     22c:	5b 87 00 20 	sw (sp+32),r7
     230:	5b 88 00 24 	sw (sp+36),r8
     234:	34 01 00 10 	mvi r1,16
     238:	45 21 00 0a 	be r9,r1,260 <_Z11instruccion3armc+0x58>
     23c:	34 01 00 11 	mvi r1,17
     240:	5d 21 00 05 	bne r9,r1,254 <_Z11instruccion3armc+0x4c>
			y.derecha();
			uart_putchar('d');
			break;

		case 0x11:
			y.izquierda();
     244:	37 81 00 08 	addi r1,sp,8
     248:	f8 00 04 18 	calli 12a8 <_ZN3arm9izquierdaEv>
			uart_putchar('z');
     24c:	34 01 00 7a 	mvi r1,122
     250:	f8 00 02 8c 	calli c80 <uart_putchar>
			break;
	}
}
     254:	2b 9d 00 04 	lw ra,(sp+4)
     258:	37 9c 00 24 	addi sp,sp,36
     25c:	c3 a0 00 00 	ret
			y.derecha();
     260:	37 81 00 08 	addi r1,sp,8
     264:	f8 00 03 f2 	calli 122c <_ZN3arm7derechaEv>
			uart_putchar('d');
     268:	34 01 00 64 	mvi r1,100
     26c:	f8 00 02 85 	calli c80 <uart_putchar>
}
     270:	2b 9d 00 04 	lw ra,(sp+4)
     274:	37 9c 00 24 	addi sp,sp,36
     278:	c3 a0 00 00 	ret

0000027c <_Z12read_commandv>:

uint32_t command_array [5];

uint8_t read_command(){
     27c:	37 9c ff f4 	addi sp,sp,-12
     280:	5b 8b 00 0c 	sw (sp+12),r11
     284:	5b 8c 00 08 	sw (sp+8),r12
     288:	5b 9d 00 04 	sw (sp+4),ra

		uint8_t cm;
		uint8_t i=0;
        while ( (cm != 0xf0) && (i<5) ){
     28c:	78 01 00 00 	mvhi r1,0x0
     290:	38 21 18 70 	ori r1,r1,0x1870
     294:	28 2c 00 00 	lw r12,(r1+0)
		uint8_t i=0;
     298:	34 0b 00 00 	mvi r11,0
        	cm = uart_getchar();
        	command_array[i]=cm;
        	i++;
     29c:	35 6b 00 01 	addi r11,r11,1
        	cm = uart_getchar();
     2a0:	f8 00 02 6e 	calli c58 <uart_getchar>
        	i++;
     2a4:	21 6b 00 ff 	andi r11,r11,0xff
        while ( (cm != 0xf0) && (i<5) ){
     2a8:	64 23 00 f0 	cmpei r3,r1,240
     2ac:	75 62 00 04 	cmpgui r2,r11,0x4
        	command_array[i]=cm;
     2b0:	59 81 00 00 	sw (r12+0),r1
        while ( (cm != 0xf0) && (i<5) ){
     2b4:	b8 62 10 00 	or r2,r3,r2
     2b8:	35 8c 00 04 	addi r12,r12,4
     2bc:	44 40 ff f8 	be r2,r0,29c <_Z12read_commandv+0x20>

        }
        if (cm == 0xf0 )
        	return 1;
        return 0;		
}
     2c0:	b8 60 08 00 	mv r1,r3
     2c4:	2b 9d 00 04 	lw ra,(sp+4)
     2c8:	2b 8b 00 0c 	lw r11,(sp+12)
     2cc:	2b 8c 00 08 	lw r12,(sp+8)
     2d0:	37 9c 00 0c 	addi sp,sp,12
     2d4:	c3 a0 00 00 	ret

000002d8 <_Z8move_arm3armS_S_S_cc>:

/* --- MOVE_ARM FUNCTION --- */

void move_arm(arm arm1, arm arm2, arm arm3, arm arm4,char b, char c){	
     2d8:	37 9c ff d8 	addi sp,sp,-40
     2dc:	5b 8b 00 08 	sw (sp+8),r11
     2e0:	5b 9d 00 04 	sw (sp+4),ra
     2e4:	43 89 00 93 	lbu r9,(sp+147)
     2e8:	5b 81 00 0c 	sw (sp+12),r1
     2ec:	5b 82 00 10 	sw (sp+16),r2
     2f0:	5b 83 00 14 	sw (sp+20),r3
     2f4:	5b 84 00 18 	sw (sp+24),r4
     2f8:	5b 85 00 1c 	sw (sp+28),r5
     2fc:	5b 86 00 20 	sw (sp+32),r6
     300:	5b 87 00 24 	sw (sp+36),r7
     304:	5b 88 00 28 	sw (sp+40),r8
	if (c == 0x27){  // ' = 27 (ASCII to HEX)
     308:	34 01 00 27 	mvi r1,39
void move_arm(arm arm1, arm arm2, arm arm3, arm arm4,char b, char c){	
     30c:	43 8b 00 8f 	lbu r11,(sp+143)
	if (c == 0x27){  // ' = 27 (ASCII to HEX)
     310:	45 21 00 13 	be r9,r1,35c <_Z8move_arm3armS_S_S_cc+0x84>
				arm4.izquierda();
				uart_putstr("Moving Arm 3 to the LEFT..."); // Moves ARM 1 (Cube's Down Face --WHITE--) to the RIGHT
			}
	}
	else {
			if (b == 0x52){
     314:	34 01 00 52 	mvi r1,82
     318:	45 61 00 4d 	be r11,r1,44c <_Z8move_arm3armS_S_S_cc+0x174>
				arm1.derecha();
				uart_putstr("Moving Arm 1 to the RIGHT..."); // Moves ARM 1 (Cube's Right Face --ORANGE--) to the RIGHT
			}
			if (b == 0x42){
     31c:	34 01 00 42 	mvi r1,66
     320:	45 61 00 21 	be r11,r1,3a4 <_Z8move_arm3armS_S_S_cc+0xcc>
				arm2.derecha();
				uart_putstr("Moving Arm 2 to the RIGHT..."); // Moves ARM 1 (Cube's Back Face --BLUE--) to the RIGHT	
			}		
			if (b == 0x4C){
     324:	34 01 00 4c 	mvi r1,76
     328:	45 61 00 47 	be r11,r1,444 <_Z8move_arm3armS_S_S_cc+0x16c>
				arm3.derecha();
				uart_putstr("Moving Arm 3 to the RIGHT..."); // Moves ARM 1 (Cube's Left Face --RED--) to the RIGHT
			}
			if (b == 0x46){
     32c:	34 01 00 46 	mvi r1,70
     330:	5d 61 00 2f 	bne r11,r1,3ec <_Z8move_arm3armS_S_S_cc+0x114>
				arm4.derecha();
     334:	37 81 00 6c 	addi r1,sp,108
     338:	f8 00 03 bd 	calli 122c <_ZN3arm7derechaEv>
				uart_putstr("Moving Arm 4 to the RIGHT..."); // Moves ARM 1 (Cube's Front Face --GREEN--) to the RIGHT
     33c:	78 02 00 00 	mvhi r2,0x0
     340:	38 42 18 90 	ori r2,r2,0x1890
     344:	28 41 00 00 	lw r1,(r2+0)
     348:	f8 00 02 58 	calli ca8 <uart_putstr>
			if (b == 0x44){
				arm4.derecha();
				uart_putstr("Moving Arm 3 to the RIGHT..."); // Moves ARM 1 (Cube's Down Face --WHITE--) to the RIGHT
			}
		}
}
     34c:	2b 9d 00 04 	lw ra,(sp+4)
     350:	2b 8b 00 08 	lw r11,(sp+8)
     354:	37 9c 00 28 	addi sp,sp,40
     358:	c3 a0 00 00 	ret
			if(b == 0x52){ 
     35c:	34 01 00 52 	mvi r1,82
     360:	45 61 00 4c 	be r11,r1,490 <_Z8move_arm3armS_S_S_cc+0x1b8>
			if(b == 0x42){
     364:	34 01 00 42 	mvi r1,66
     368:	45 61 00 40 	be r11,r1,468 <_Z8move_arm3armS_S_S_cc+0x190>
			if(b == 0x4C){
     36c:	34 01 00 4c 	mvi r1,76
     370:	45 61 00 2b 	be r11,r1,41c <_Z8move_arm3armS_S_S_cc+0x144>
			if (b == 0x46){
     374:	34 01 00 46 	mvi r1,70
     378:	5d 61 00 4d 	bne r11,r1,4ac <_Z8move_arm3armS_S_S_cc+0x1d4>
				arm4.izquierda();
     37c:	37 81 00 6c 	addi r1,sp,108
     380:	f8 00 03 ca 	calli 12a8 <_ZN3arm9izquierdaEv>
				uart_putstr("Moving Arm 4 to the LEFT..."); // Moves ARM 1 (Cube's Front Face --GREEN--) to the LEFT
     384:	78 02 00 00 	mvhi r2,0x0
     388:	38 42 18 80 	ori r2,r2,0x1880
     38c:	28 41 00 00 	lw r1,(r2+0)
     390:	f8 00 02 46 	calli ca8 <uart_putstr>
}
     394:	2b 9d 00 04 	lw ra,(sp+4)
     398:	2b 8b 00 08 	lw r11,(sp+8)
     39c:	37 9c 00 28 	addi sp,sp,40
     3a0:	c3 a0 00 00 	ret
				arm2.derecha();
     3a4:	37 81 00 2c 	addi r1,sp,44
     3a8:	f8 00 03 a1 	calli 122c <_ZN3arm7derechaEv>
				uart_putstr("Moving Arm 2 to the RIGHT..."); // Moves ARM 1 (Cube's Back Face --BLUE--) to the RIGHT	
     3ac:	78 02 00 00 	mvhi r2,0x0
     3b0:	38 42 18 88 	ori r2,r2,0x1888
     3b4:	28 41 00 00 	lw r1,(r2+0)
     3b8:	f8 00 02 3c 	calli ca8 <uart_putstr>
			if (b == 0x44){
     3bc:	34 01 00 44 	mvi r1,68
     3c0:	5d 61 ff f5 	bne r11,r1,394 <_Z8move_arm3armS_S_S_cc+0xbc>
				arm4.derecha();
     3c4:	37 81 00 6c 	addi r1,sp,108
     3c8:	f8 00 03 99 	calli 122c <_ZN3arm7derechaEv>
				uart_putstr("Moving Arm 3 to the RIGHT..."); // Moves ARM 1 (Cube's Down Face --WHITE--) to the RIGHT
     3cc:	78 02 00 00 	mvhi r2,0x0
     3d0:	38 42 18 8c 	ori r2,r2,0x188c
     3d4:	28 41 00 00 	lw r1,(r2+0)
     3d8:	f8 00 02 34 	calli ca8 <uart_putstr>
}
     3dc:	2b 9d 00 04 	lw ra,(sp+4)
     3e0:	2b 8b 00 08 	lw r11,(sp+8)
     3e4:	37 9c 00 28 	addi sp,sp,40
     3e8:	c3 a0 00 00 	ret
			if (b == 0x55){
     3ec:	34 01 00 55 	mvi r1,85
     3f0:	5d 61 ff f3 	bne r11,r1,3bc <_Z8move_arm3armS_S_S_cc+0xe4>
				arm1.derecha();
     3f4:	37 81 00 0c 	addi r1,sp,12
     3f8:	f8 00 03 8d 	calli 122c <_ZN3arm7derechaEv>
				uart_putstr("Moving Arm 1 to the RIGHT..."); // Moves ARM 1 (Cube's Upper Face --YELLOW--) to the RIGHT
     3fc:	78 02 00 00 	mvhi r2,0x0
     400:	38 42 18 84 	ori r2,r2,0x1884
     404:	28 41 00 00 	lw r1,(r2+0)
     408:	f8 00 02 28 	calli ca8 <uart_putstr>
}
     40c:	2b 9d 00 04 	lw ra,(sp+4)
     410:	2b 8b 00 08 	lw r11,(sp+8)
     414:	37 9c 00 28 	addi sp,sp,40
     418:	c3 a0 00 00 	ret
			 	arm3.izquierda();
     41c:	37 81 00 4c 	addi r1,sp,76
				arm4.izquierda();
     420:	f8 00 03 a2 	calli 12a8 <_ZN3arm9izquierdaEv>
				uart_putstr("Moving Arm 3 to the LEFT..."); // Moves ARM 1 (Cube's Down Face --WHITE--) to the RIGHT
     424:	78 02 00 00 	mvhi r2,0x0
     428:	38 42 18 7c 	ori r2,r2,0x187c
     42c:	28 41 00 00 	lw r1,(r2+0)
     430:	f8 00 02 1e 	calli ca8 <uart_putstr>
}
     434:	2b 9d 00 04 	lw ra,(sp+4)
     438:	2b 8b 00 08 	lw r11,(sp+8)
     43c:	37 9c 00 28 	addi sp,sp,40
     440:	c3 a0 00 00 	ret
				arm3.derecha();
     444:	37 81 00 4c 	addi r1,sp,76
     448:	e3 ff ff e0 	bi 3c8 <_Z8move_arm3armS_S_S_cc+0xf0>
				arm1.derecha();
     44c:	37 81 00 0c 	addi r1,sp,12
     450:	f8 00 03 77 	calli 122c <_ZN3arm7derechaEv>
				uart_putstr("Moving Arm 1 to the RIGHT..."); // Moves ARM 1 (Cube's Right Face --ORANGE--) to the RIGHT
     454:	78 02 00 00 	mvhi r2,0x0
     458:	38 42 18 84 	ori r2,r2,0x1884
     45c:	28 41 00 00 	lw r1,(r2+0)
     460:	f8 00 02 12 	calli ca8 <uart_putstr>
			if (b == 0x55){
     464:	e3 ff ff d6 	bi 3bc <_Z8move_arm3armS_S_S_cc+0xe4>
				arm2.izquierda();
     468:	37 81 00 2c 	addi r1,sp,44
     46c:	f8 00 03 8f 	calli 12a8 <_ZN3arm9izquierdaEv>
				uart_putstr("Moving Arm 2 to the LEFT..."); // Moves ARM 1 (Cube's Back Face --BLUE--) to the LEFT
     470:	78 02 00 00 	mvhi r2,0x0
     474:	38 42 18 78 	ori r2,r2,0x1878
     478:	28 41 00 00 	lw r1,(r2+0)
     47c:	f8 00 02 0b 	calli ca8 <uart_putstr>
			if (b == 0x44){
     480:	34 01 00 44 	mvi r1,68
     484:	5d 61 ff c4 	bne r11,r1,394 <_Z8move_arm3armS_S_S_cc+0xbc>
				arm4.izquierda();
     488:	37 81 00 6c 	addi r1,sp,108
     48c:	e3 ff ff e5 	bi 420 <_Z8move_arm3armS_S_S_cc+0x148>
				arm1.izquierda();
     490:	37 81 00 0c 	addi r1,sp,12
     494:	f8 00 03 85 	calli 12a8 <_ZN3arm9izquierdaEv>
				uart_putstr("Moving Arm 1 to the LEFT..."); // Moves ARM 1 (Cube's Right Face --ORANGE--) to the LEFT
     498:	78 02 00 00 	mvhi r2,0x0
     49c:	38 42 18 74 	ori r2,r2,0x1874
     4a0:	28 41 00 00 	lw r1,(r2+0)
     4a4:	f8 00 02 01 	calli ca8 <uart_putstr>
			if (b == 0x55){
     4a8:	e3 ff ff f6 	bi 480 <_Z8move_arm3armS_S_S_cc+0x1a8>
     4ac:	34 01 00 55 	mvi r1,85
     4b0:	5d 61 ff f4 	bne r11,r1,480 <_Z8move_arm3armS_S_S_cc+0x1a8>
				arm1.izquierda();
     4b4:	37 81 00 0c 	addi r1,sp,12
     4b8:	f8 00 03 7c 	calli 12a8 <_ZN3arm9izquierdaEv>
				uart_putstr("Moving Arm 1 to the LEFT..."); // Moves ARM 1 (Cube's Upper Face --YELLOW--) to the RIGHT
     4bc:	78 02 00 00 	mvhi r2,0x0
     4c0:	38 42 18 74 	ori r2,r2,0x1874
     4c4:	28 41 00 00 	lw r1,(r2+0)
     4c8:	f8 00 01 f8 	calli ca8 <uart_putstr>
			if (b == 0x44){
     4cc:	e3 ff ff b2 	bi 394 <_Z8move_arm3armS_S_S_cc+0xbc>

000004d0 <main>:

int main(){
     4d0:	37 9c fe d0 	addi sp,sp,-304
     4d4:	5b 8b 00 ac 	sw (sp+172),r11
     4d8:	5b 8c 00 a8 	sw (sp+168),r12
     4dc:	5b 8d 00 a4 	sw (sp+164),r13
     4e0:	5b 8e 00 a0 	sw (sp+160),r14
     4e4:	5b 8f 00 9c 	sw (sp+156),r15
     4e8:	5b 90 00 98 	sw (sp+152),r16
     4ec:	5b 91 00 94 	sw (sp+148),r17
     4f0:	5b 92 00 90 	sw (sp+144),r18
     4f4:	5b 93 00 8c 	sw (sp+140),r19
     4f8:	5b 94 00 88 	sw (sp+136),r20
     4fc:	5b 95 00 84 	sw (sp+132),r21
     500:	5b 96 00 80 	sw (sp+128),r22
     504:	5b 97 00 7c 	sw (sp+124),r23
     508:	5b 98 00 78 	sw (sp+120),r24
     50c:	5b 99 00 74 	sw (sp+116),r25
     510:	5b 9b 00 70 	sw (sp+112),fp
     514:	5b 9d 00 6c 	sw (sp+108),ra
	// fifo_write(30);
	// abc = fifo_state();

	cam camera;

	uart_putstr("Initializing...");
     518:	78 02 00 00 	mvhi r2,0x0
     51c:	38 42 18 94 	ori r2,r2,0x1894
     520:	28 41 00 00 	lw r1,(r2+0)
     524:	f8 00 01 e1 	calli ca8 <uart_putstr>
   volatile uint32_t en7;
   volatile uint32_t period7;
   volatile uint32_t duty7;
} pwm_t;

class  pwm{
     528:	78 04 50 00 	mvhi r4,0x5000
	arm arm1;
	arm arm2;
	arm arm3;
	arm arm4;

	arm1.set_serv(0,1);
     52c:	34 03 00 01 	mvi r3,1
     530:	34 02 00 00 	mvi r2,0
     534:	37 81 00 b4 	addi r1,sp,180
     538:	5b 84 00 b4 	sw (sp+180),r4
     53c:	5b 84 00 d4 	sw (sp+212),r4
     540:	5b 84 00 f4 	sw (sp+244),r4
     544:	5b 84 01 14 	sw (sp+276),r4
     548:	f8 00 03 77 	calli 1324 <_ZN3arm8set_servEii>
	arm2.set_serv(2,3);
     54c:	34 03 00 03 	mvi r3,3
     550:	34 02 00 02 	mvi r2,2
     554:	37 81 00 d4 	addi r1,sp,212
     558:	f8 00 03 73 	calli 1324 <_ZN3arm8set_servEii>
	arm3.set_serv(4,5);
     55c:	34 03 00 05 	mvi r3,5
     560:	34 02 00 04 	mvi r2,4
     564:	37 81 00 f4 	addi r1,sp,244
     568:	f8 00 03 6f 	calli 1324 <_ZN3arm8set_servEii>
	arm4.set_serv(6,7);
     56c:	34 02 00 06 	mvi r2,6
     570:	37 81 01 14 	addi r1,sp,276
     574:	34 03 00 07 	mvi r3,7
     578:	f8 00 03 6b 	calli 1324 <_ZN3arm8set_servEii>

	uart_putstr("Ready");
     57c:	78 04 00 00 	mvhi r4,0x0
     580:	38 84 18 98 	ori r4,r4,0x1898
     584:	28 81 00 00 	lw r1,(r4+0)
     588:	78 05 00 00 	mvhi r5,0x0
     58c:	78 04 00 00 	mvhi r4,0x0
     590:	38 a5 18 9c 	ori r5,r5,0x189c
     594:	38 84 18 a4 	ori r4,r4,0x18a4
     598:	28 ac 00 00 	lw r12,(r5+0)
     59c:	78 02 00 00 	mvhi r2,0x0
     5a0:	28 8f 00 00 	lw r15,(r4+0)
     5a4:	78 05 00 00 	mvhi r5,0x0
	while(1){
		uart_putchar('\n');
		uart_putstr("------Instruction------");
     5a8:	78 04 00 00 	mvhi r4,0x0
     5ac:	38 42 18 a0 	ori r2,r2,0x18a0
     5b0:	38 a5 18 a8 	ori r5,r5,0x18a8
     5b4:	38 84 18 b0 	ori r4,r4,0x18b0
     5b8:	28 52 00 00 	lw r18,(r2+0)
     5bc:	28 b1 00 00 	lw r17,(r5+0)
     5c0:	78 02 00 00 	mvhi r2,0x0
     5c4:	28 8b 00 00 	lw r11,(r4+0)

	    uint8_t cm=read_command();

		if (cm){
			if (command_array[0] == 0xff) {
					uart_putstr("Home...");
     5c8:	78 05 00 00 	mvhi r5,0x0
					arm4.home();
					uart_putstr("Ready");
			}

			if (command_array[0] == 0xfe){
					uart_putstr("Init...");
     5cc:	78 04 00 00 	mvhi r4,0x0
     5d0:	38 42 18 ac 	ori r2,r2,0x18ac
					uart_putstr("Home...");
     5d4:	38 a5 18 b4 	ori r5,r5,0x18b4
					uart_putstr("Init...");
     5d8:	38 84 18 b8 	ori r4,r4,0x18b8
     5dc:	28 50 00 00 	lw r16,(r2+0)
					uart_putstr("Home...");
     5e0:	28 bb 00 00 	lw fp,(r5+0)
					uart_putstr("Init...");
     5e4:	28 99 00 00 	lw r25,(r4+0)
					uart_putstr("Ready");
			}

			if (command_array[0] == 0xfd){
				inst = command_array[2];
				uart_putstr("Moving...");
     5e8:	78 05 00 00 	mvhi r5,0x0
			}
			if (command_array[0] == 0xfc){
				br  = command_array[1];
				dir = command_array[2];
				val = command_array[3];
				uart_putstr("Calibrating...");
     5ec:	78 02 00 00 	mvhi r2,0x0
					arm4.calib(dir,val);
				uart_putstr("Ready");
			}

			if (command_array[0] == 0x50){
				uart_putstr("Reset camera...");
     5f0:	78 04 00 00 	mvhi r4,0x0
				uart_putstr("Moving...");
     5f4:	38 a5 18 bc 	ori r5,r5,0x18bc
				uart_putstr("Calibrating...");
     5f8:	38 42 18 c0 	ori r2,r2,0x18c0
				uart_putstr("Reset camera...");
     5fc:	38 84 18 c4 	ori r4,r4,0x18c4
				uart_putstr("Moving...");
     600:	28 b8 00 00 	lw r24,(r5+0)
				uart_putstr("Calibrating...");
     604:	28 57 00 00 	lw r23,(r2+0)
				uart_putstr("Reset camera...");
     608:	28 96 00 00 	lw r22,(r4+0)
				camera.reset();
			}

			if (command_array[0] == 0x5a){
				uart_putstr("Take picture...");
     60c:	78 05 00 00 	mvhi r5,0x0
				camera.takepicture();
			}

			if (command_array[0] == 0x5b){
				uart_putstr("Get size...");
     610:	78 02 00 00 	mvhi r2,0x0
				camera.getsize();
			}

			if (command_array[0] == 0x5c){
				uart_putstr("Sending...");
     614:	78 04 00 00 	mvhi r4,0x0
				uart_putstr("Take picture...");
     618:	38 a5 18 c8 	ori r5,r5,0x18c8
				uart_putstr("Get size...");
     61c:	38 42 18 cc 	ori r2,r2,0x18cc
				uart_putstr("Sending...");
     620:	38 84 18 d0 	ori r4,r4,0x18d0
					uart_putstr("Ready");
     624:	b8 20 70 00 	mv r14,r1
				uart_putstr("Take picture...");
     628:	28 b5 00 00 	lw r21,(r5+0)
				uart_putstr("Get size...");
     62c:	28 54 00 00 	lw r20,(r2+0)
				uart_putstr("Sending...");
     630:	28 93 00 00 	lw r19,(r4+0)
	uart_putstr("Ready");
     634:	f8 00 01 9d 	calli ca8 <uart_putstr>
			if (command_array[0] == 0xff) {
     638:	34 0d 00 ff 	mvi r13,255
		uart_putchar('\n');
     63c:	34 01 00 0a 	mvi r1,10
     640:	f8 00 01 90 	calli c80 <uart_putchar>
		uart_putstr("------Instruction------");
     644:	b9 60 08 00 	mv r1,r11
     648:	f8 00 01 98 	calli ca8 <uart_putstr>
		uart_putchar('\n');
     64c:	34 01 00 0a 	mvi r1,10
     650:	f8 00 01 8c 	calli c80 <uart_putchar>
	    uint8_t cm=read_command();
     654:	fb ff ff 0a 	calli 27c <_Z12read_commandv>
		if (cm){
     658:	44 20 ff f9 	be r1,r0,63c <main+0x16c>
			if (command_array[0] == 0xff) {
     65c:	29 81 00 00 	lw r1,(r12+0)
     660:	44 2d 00 b3 	be r1,r13,92c <main+0x45c>
			if (command_array[0] == 0xfe){
     664:	34 02 00 fe 	mvi r2,254
     668:	44 22 00 a3 	be r1,r2,8f4 <main+0x424>
			if (command_array[0] == 0xfd){
     66c:	34 02 00 fd 	mvi r2,253
     670:	44 22 00 90 	be r1,r2,8b0 <main+0x3e0>
			if (command_array[0] == 0xfc){
     674:	34 02 00 fc 	mvi r2,252
     678:	44 22 00 77 	be r1,r2,854 <main+0x384>
			if (command_array[0] == 0x50){
     67c:	34 02 00 50 	mvi r2,80
     680:	44 22 00 6f 	be r1,r2,83c <main+0x36c>
			if (command_array[0] == 0x5a){
     684:	34 02 00 5a 	mvi r2,90
     688:	44 22 00 67 	be r1,r2,824 <main+0x354>
			if (command_array[0] == 0x5b){
     68c:	34 02 00 5b 	mvi r2,91
     690:	44 22 00 5f 	be r1,r2,80c <main+0x33c>
			if (command_array[0] == 0x5c){
     694:	34 02 00 5c 	mvi r2,92
     698:	44 22 00 57 	be r1,r2,7f4 <main+0x324>
				camera.sendpicture();
			}

			if (command_array[0] == 0x5d){
     69c:	34 02 00 5d 	mvi r2,93
     6a0:	44 22 00 4d 	be r1,r2,7d4 <main+0x304>
				uart_putstr("Stoping...");
				camera.stoptaking();
			}
// Cube Solver
			if (command_array[0] == 0xfb){
     6a4:	34 02 00 fb 	mvi r2,251
     6a8:	5c 22 ff e5 	bne r1,r2,63c <main+0x16c>
				adr = command_array[1];
				dir = command_array[2];
				uart_putstr("Solving Cube");
     6ac:	78 04 00 00 	mvhi r4,0x0
     6b0:	38 84 18 d8 	ori r4,r4,0x18d8
				adr = command_array[1];
     6b4:	29 83 00 04 	lw r3,(r12+4)
				dir = command_array[2];
     6b8:	29 82 00 08 	lw r2,(r12+8)
				uart_putstr("Solving Cube");
     6bc:	28 81 00 00 	lw r1,(r4+0)
				adr = command_array[1];
     6c0:	5a 03 00 00 	sw (r16+0),r3
				dir = command_array[2];
     6c4:	59 e2 00 00 	sw (r15+0),r2
				uart_putstr("Solving Cube");
     6c8:	f8 00 01 78 	calli ca8 <uart_putstr>
				move_arm(arm1, arm2, arm3, arm4, adr, dir);
     6cc:	42 01 00 03 	lbu r1,(r16+3)
     6d0:	41 e2 00 03 	lbu r2,(r15+3)
     6d4:	5b 81 00 64 	sw (sp+100),r1
     6d8:	2b 81 01 14 	lw r1,(sp+276)
     6dc:	5b 82 00 68 	sw (sp+104),r2
     6e0:	5b 81 00 44 	sw (sp+68),r1
     6e4:	2b 81 01 18 	lw r1,(sp+280)
     6e8:	5b 81 00 48 	sw (sp+72),r1
     6ec:	2b 81 01 1c 	lw r1,(sp+284)
     6f0:	5b 81 00 4c 	sw (sp+76),r1
     6f4:	2b 81 01 20 	lw r1,(sp+288)
     6f8:	5b 81 00 50 	sw (sp+80),r1
     6fc:	2b 81 01 24 	lw r1,(sp+292)
     700:	5b 81 00 54 	sw (sp+84),r1
     704:	2b 81 01 28 	lw r1,(sp+296)
     708:	5b 81 00 58 	sw (sp+88),r1
     70c:	2b 81 01 2c 	lw r1,(sp+300)
     710:	5b 81 00 5c 	sw (sp+92),r1
     714:	2b 81 01 30 	lw r1,(sp+304)
     718:	5b 81 00 60 	sw (sp+96),r1
     71c:	2b 81 00 f4 	lw r1,(sp+244)
     720:	5b 81 00 24 	sw (sp+36),r1
     724:	2b 81 00 f8 	lw r1,(sp+248)
     728:	5b 81 00 28 	sw (sp+40),r1
     72c:	2b 81 00 fc 	lw r1,(sp+252)
     730:	5b 81 00 2c 	sw (sp+44),r1
     734:	2b 81 01 00 	lw r1,(sp+256)
     738:	5b 81 00 30 	sw (sp+48),r1
     73c:	2b 81 01 04 	lw r1,(sp+260)
     740:	5b 81 00 34 	sw (sp+52),r1
     744:	2b 81 01 08 	lw r1,(sp+264)
     748:	5b 81 00 38 	sw (sp+56),r1
     74c:	2b 81 00 b4 	lw r1,(sp+180)
     750:	2b 89 01 0c 	lw r9,(sp+268)
     754:	2b 85 00 c4 	lw r5,(sp+196)
     758:	2b 82 00 b8 	lw r2,(sp+184)
     75c:	5b 89 00 3c 	sw (sp+60),r9
     760:	2b 89 01 10 	lw r9,(sp+272)
     764:	2b 83 00 bc 	lw r3,(sp+188)
     768:	2b 84 00 c0 	lw r4,(sp+192)
     76c:	5b 89 00 40 	sw (sp+64),r9
     770:	2b 89 00 d4 	lw r9,(sp+212)
     774:	2b 86 00 c8 	lw r6,(sp+200)
     778:	2b 87 00 cc 	lw r7,(sp+204)
     77c:	5b 89 00 04 	sw (sp+4),r9
     780:	2b 89 00 d8 	lw r9,(sp+216)
     784:	2b 88 00 d0 	lw r8,(sp+208)
     788:	5b 89 00 08 	sw (sp+8),r9
     78c:	2b 89 00 dc 	lw r9,(sp+220)
     790:	5b 89 00 0c 	sw (sp+12),r9
     794:	2b 89 00 e0 	lw r9,(sp+224)
     798:	5b 89 00 10 	sw (sp+16),r9
     79c:	2b 89 00 e4 	lw r9,(sp+228)
     7a0:	5b 89 00 14 	sw (sp+20),r9
     7a4:	2b 89 00 e8 	lw r9,(sp+232)
     7a8:	5b 89 00 18 	sw (sp+24),r9
     7ac:	2b 89 00 ec 	lw r9,(sp+236)
     7b0:	5b 89 00 1c 	sw (sp+28),r9
     7b4:	2b 89 00 f0 	lw r9,(sp+240)
     7b8:	5b 89 00 20 	sw (sp+32),r9
     7bc:	fb ff fe c7 	calli 2d8 <_Z8move_arm3armS_S_S_cc>
				uart_putstr("Done");
     7c0:	78 05 00 00 	mvhi r5,0x0
     7c4:	38 a5 18 dc 	ori r5,r5,0x18dc
     7c8:	28 a1 00 00 	lw r1,(r5+0)
     7cc:	f8 00 01 37 	calli ca8 <uart_putstr>
     7d0:	e3 ff ff 9a 	bi 638 <main+0x168>
				uart_putstr("Stoping...");
     7d4:	78 02 00 00 	mvhi r2,0x0
     7d8:	38 42 18 d4 	ori r2,r2,0x18d4
     7dc:	28 41 00 00 	lw r1,(r2+0)
     7e0:	f8 00 01 32 	calli ca8 <uart_putstr>
				camera.stoptaking();
     7e4:	37 81 00 b0 	addi r1,sp,176
     7e8:	f8 00 03 fa 	calli 17d0 <_ZN3cam10stoptakingEv>
     7ec:	29 81 00 00 	lw r1,(r12+0)
     7f0:	e3 ff ff ad 	bi 6a4 <main+0x1d4>
				uart_putstr("Sending...");
     7f4:	ba 60 08 00 	mv r1,r19
     7f8:	f8 00 01 2c 	calli ca8 <uart_putstr>
				camera.sendpicture();
     7fc:	37 81 00 b0 	addi r1,sp,176
     800:	f8 00 03 89 	calli 1624 <_ZN3cam11sendpictureEv>
     804:	29 81 00 00 	lw r1,(r12+0)
     808:	e3 ff ff a5 	bi 69c <main+0x1cc>
				uart_putstr("Get size...");
     80c:	ba 80 08 00 	mv r1,r20
     810:	f8 00 01 26 	calli ca8 <uart_putstr>
				camera.getsize();
     814:	37 81 00 b0 	addi r1,sp,176
     818:	f8 00 03 50 	calli 1558 <_ZN3cam7getsizeEv>
     81c:	29 81 00 00 	lw r1,(r12+0)
     820:	e3 ff ff 9d 	bi 694 <main+0x1c4>
				uart_putstr("Take picture...");
     824:	ba a0 08 00 	mv r1,r21
     828:	f8 00 01 20 	calli ca8 <uart_putstr>
				camera.takepicture();
     82c:	37 81 00 b0 	addi r1,sp,176
     830:	f8 00 03 22 	calli 14b8 <_ZN3cam11takepictureEv>
     834:	29 81 00 00 	lw r1,(r12+0)
     838:	e3 ff ff 95 	bi 68c <main+0x1bc>
				uart_putstr("Reset camera...");
     83c:	ba c0 08 00 	mv r1,r22
     840:	f8 00 01 1a 	calli ca8 <uart_putstr>
				camera.reset();
     844:	37 81 00 b0 	addi r1,sp,176
     848:	f8 00 02 f8 	calli 1428 <_ZN3cam5resetEv>
     84c:	29 81 00 00 	lw r1,(r12+0)
     850:	e3 ff ff 8d 	bi 684 <main+0x1b4>
				val = command_array[3];
     854:	29 82 00 0c 	lw r2,(r12+12)
				br  = command_array[1];
     858:	29 84 00 04 	lw r4,(r12+4)
				dir = command_array[2];
     85c:	29 83 00 08 	lw r3,(r12+8)
				br  = command_array[1];
     860:	78 05 00 00 	mvhi r5,0x0
				uart_putstr("Calibrating...");
     864:	ba e0 08 00 	mv r1,r23
				br  = command_array[1];
     868:	38 a5 1b c8 	ori r5,r5,0x1bc8
				val = command_array[3];
     86c:	5a 22 00 00 	sw (r17+0),r2
				br  = command_array[1];
     870:	58 a4 00 00 	sw (r5+0),r4
				dir = command_array[2];
     874:	59 e3 00 00 	sw (r15+0),r3
				uart_putstr("Calibrating...");
     878:	f8 00 01 0c 	calli ca8 <uart_putstr>
				if (command_array[1] == 0x01)
     87c:	29 81 00 04 	lw r1,(r12+4)
     880:	34 02 00 01 	mvi r2,1
     884:	44 22 00 49 	be r1,r2,9a8 <main+0x4d8>
				if (command_array[1] == 0x02)
     888:	34 02 00 02 	mvi r2,2
     88c:	44 22 00 41 	be r1,r2,990 <main+0x4c0>
				if (command_array[1] == 0x03)
     890:	34 02 00 03 	mvi r2,3
     894:	44 22 00 39 	be r1,r2,978 <main+0x4a8>
				if (command_array[1] == 0x04)
     898:	34 02 00 04 	mvi r2,4
     89c:	44 22 00 32 	be r1,r2,964 <main+0x494>
				uart_putstr("Ready");
     8a0:	b9 c0 08 00 	mv r1,r14
     8a4:	f8 00 01 01 	calli ca8 <uart_putstr>
     8a8:	29 81 00 00 	lw r1,(r12+0)
     8ac:	e3 ff ff 74 	bi 67c <main+0x1ac>
				inst = command_array[2];
     8b0:	29 82 00 08 	lw r2,(r12+8)
				uart_putstr("Moving...");
     8b4:	bb 00 08 00 	mv r1,r24
				inst = command_array[2];
     8b8:	5a 42 00 00 	sw (r18+0),r2
				uart_putstr("Moving...");
     8bc:	f8 00 00 fb 	calli ca8 <uart_putstr>
				if (command_array[1] == 0x01) 
     8c0:	29 81 00 04 	lw r1,(r12+4)
     8c4:	34 02 00 01 	mvi r2,1
     8c8:	44 22 00 64 	be r1,r2,a58 <main+0x588>
				if (command_array[1] == 0x02)
     8cc:	34 02 00 02 	mvi r2,2
     8d0:	44 22 00 55 	be r1,r2,a24 <main+0x554>
				if (command_array[1] == 0x03)
     8d4:	34 02 00 03 	mvi r2,3
     8d8:	44 22 00 46 	be r1,r2,9f0 <main+0x520>
				if (command_array[1] == 0x04)
     8dc:	34 02 00 04 	mvi r2,4
     8e0:	44 22 00 38 	be r1,r2,9c0 <main+0x4f0>
				uart_putstr("Ready");
     8e4:	b9 c0 08 00 	mv r1,r14
     8e8:	f8 00 00 f0 	calli ca8 <uart_putstr>
     8ec:	29 81 00 00 	lw r1,(r12+0)
     8f0:	e3 ff ff 61 	bi 674 <main+0x1a4>
					uart_putstr("Init...");
     8f4:	bb 20 08 00 	mv r1,r25
     8f8:	f8 00 00 ec 	calli ca8 <uart_putstr>
					arm1.init();
     8fc:	37 81 00 b4 	addi r1,sp,180
     900:	f8 00 02 25 	calli 1194 <_ZN3arm4initEv>
					arm2.init();
     904:	37 81 00 d4 	addi r1,sp,212
     908:	f8 00 02 23 	calli 1194 <_ZN3arm4initEv>
					arm3.init();
     90c:	37 81 00 f4 	addi r1,sp,244
     910:	f8 00 02 21 	calli 1194 <_ZN3arm4initEv>
					arm4.init();
     914:	37 81 01 14 	addi r1,sp,276
     918:	f8 00 02 1f 	calli 1194 <_ZN3arm4initEv>
					uart_putstr("Ready");
     91c:	b9 c0 08 00 	mv r1,r14
     920:	f8 00 00 e2 	calli ca8 <uart_putstr>
     924:	29 81 00 00 	lw r1,(r12+0)
     928:	e3 ff ff 51 	bi 66c <main+0x19c>
					uart_putstr("Home...");
     92c:	bb 60 08 00 	mv r1,fp
     930:	f8 00 00 de 	calli ca8 <uart_putstr>
					arm1.home();
     934:	37 81 00 b4 	addi r1,sp,180
     938:	f8 00 02 30 	calli 11f8 <_ZN3arm4homeEv>
					arm2.home();
     93c:	37 81 00 d4 	addi r1,sp,212
     940:	f8 00 02 2e 	calli 11f8 <_ZN3arm4homeEv>
					arm3.home();
     944:	37 81 00 f4 	addi r1,sp,244
     948:	f8 00 02 2c 	calli 11f8 <_ZN3arm4homeEv>
					arm4.home();
     94c:	37 81 01 14 	addi r1,sp,276
     950:	f8 00 02 2a 	calli 11f8 <_ZN3arm4homeEv>
					uart_putstr("Ready");
     954:	b9 c0 08 00 	mv r1,r14
     958:	f8 00 00 d4 	calli ca8 <uart_putstr>
     95c:	29 81 00 00 	lw r1,(r12+0)
     960:	e3 ff ff 41 	bi 664 <main+0x194>
					arm4.calib(dir,val);
     964:	2a 23 00 00 	lw r3,(r17+0)
     968:	41 e2 00 03 	lbu r2,(r15+3)
     96c:	37 81 01 14 	addi r1,sp,276
     970:	f8 00 02 99 	calli 13d4 <_ZN3arm5calibEci>
     974:	e3 ff ff cb 	bi 8a0 <main+0x3d0>
					arm3.calib(dir,val);
     978:	2a 23 00 00 	lw r3,(r17+0)
     97c:	41 e2 00 03 	lbu r2,(r15+3)
     980:	37 81 00 f4 	addi r1,sp,244
     984:	f8 00 02 94 	calli 13d4 <_ZN3arm5calibEci>
     988:	29 81 00 04 	lw r1,(r12+4)
     98c:	e3 ff ff c3 	bi 898 <main+0x3c8>
					arm2.calib(dir,val);
     990:	2a 23 00 00 	lw r3,(r17+0)
     994:	41 e2 00 03 	lbu r2,(r15+3)
     998:	37 81 00 d4 	addi r1,sp,212
     99c:	f8 00 02 8e 	calli 13d4 <_ZN3arm5calibEci>
     9a0:	29 81 00 04 	lw r1,(r12+4)
     9a4:	e3 ff ff bb 	bi 890 <main+0x3c0>
					arm1.calib(dir,val);
     9a8:	2a 23 00 00 	lw r3,(r17+0)
     9ac:	41 e2 00 03 	lbu r2,(r15+3)
     9b0:	37 81 00 b4 	addi r1,sp,180
     9b4:	f8 00 02 88 	calli 13d4 <_ZN3arm5calibEci>
     9b8:	29 81 00 04 	lw r1,(r12+4)
     9bc:	e3 ff ff b3 	bi 888 <main+0x3b8>
					instruccion(arm4,inst);
     9c0:	42 49 00 03 	lbu r9,(r18+3)
     9c4:	2b 81 01 14 	lw r1,(sp+276)
     9c8:	2b 82 01 18 	lw r2,(sp+280)
     9cc:	2b 83 01 1c 	lw r3,(sp+284)
     9d0:	2b 84 01 20 	lw r4,(sp+288)
     9d4:	2b 85 01 24 	lw r5,(sp+292)
     9d8:	2b 86 01 28 	lw r6,(sp+296)
     9dc:	2b 87 01 2c 	lw r7,(sp+300)
     9e0:	2b 88 01 30 	lw r8,(sp+304)
     9e4:	5b 89 00 04 	sw (sp+4),r9
     9e8:	fb ff fe 08 	calli 208 <_Z11instruccion3armc>
     9ec:	e3 ff ff be 	bi 8e4 <main+0x414>
					instruccion(arm3,inst);
     9f0:	42 49 00 03 	lbu r9,(r18+3)
     9f4:	2b 81 00 f4 	lw r1,(sp+244)
     9f8:	2b 82 00 f8 	lw r2,(sp+248)
     9fc:	2b 83 00 fc 	lw r3,(sp+252)
     a00:	2b 84 01 00 	lw r4,(sp+256)
     a04:	2b 85 01 04 	lw r5,(sp+260)
     a08:	2b 86 01 08 	lw r6,(sp+264)
     a0c:	2b 87 01 0c 	lw r7,(sp+268)
     a10:	2b 88 01 10 	lw r8,(sp+272)
     a14:	5b 89 00 04 	sw (sp+4),r9
     a18:	fb ff fd fc 	calli 208 <_Z11instruccion3armc>
     a1c:	29 81 00 04 	lw r1,(r12+4)
     a20:	e3 ff ff af 	bi 8dc <main+0x40c>
					instruccion(arm2,inst);
     a24:	42 49 00 03 	lbu r9,(r18+3)
     a28:	2b 81 00 d4 	lw r1,(sp+212)
     a2c:	2b 82 00 d8 	lw r2,(sp+216)
     a30:	2b 83 00 dc 	lw r3,(sp+220)
     a34:	2b 84 00 e0 	lw r4,(sp+224)
     a38:	2b 85 00 e4 	lw r5,(sp+228)
     a3c:	2b 86 00 e8 	lw r6,(sp+232)
     a40:	2b 87 00 ec 	lw r7,(sp+236)
     a44:	2b 88 00 f0 	lw r8,(sp+240)
     a48:	5b 89 00 04 	sw (sp+4),r9
     a4c:	fb ff fd ef 	calli 208 <_Z11instruccion3armc>
     a50:	29 81 00 04 	lw r1,(r12+4)
     a54:	e3 ff ff a0 	bi 8d4 <main+0x404>
					instruccion(arm1,inst);
     a58:	42 49 00 03 	lbu r9,(r18+3)
     a5c:	2b 81 00 b4 	lw r1,(sp+180)
     a60:	2b 82 00 b8 	lw r2,(sp+184)
     a64:	2b 83 00 bc 	lw r3,(sp+188)
     a68:	2b 84 00 c0 	lw r4,(sp+192)
     a6c:	2b 85 00 c4 	lw r5,(sp+196)
     a70:	2b 86 00 c8 	lw r6,(sp+200)
     a74:	2b 87 00 cc 	lw r7,(sp+204)
     a78:	2b 88 00 d0 	lw r8,(sp+208)
     a7c:	5b 89 00 04 	sw (sp+4),r9
     a80:	fb ff fd e2 	calli 208 <_Z11instruccion3armc>
     a84:	29 81 00 04 	lw r1,(r12+4)
     a88:	e3 ff ff 91 	bi 8cc <main+0x3fc>

00000a8c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
     a8c:	78 01 00 00 	mvhi r1,0x0
     a90:	38 21 1a 88 	ori r1,r1,0x1a88
     a94:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     a98:	78 04 00 00 	mvhi r4,0x0
     a9c:	38 84 1a 8c 	ori r4,r4,0x1a8c
     aa0:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
     aa4:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     aa8:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
     aac:	34 21 00 01 	addi r1,r1,1
     ab0:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     ab4:	34 01 00 0e 	mvi r1,14
     ab8:	58 61 00 00 	sw (r3+0),r1
}
     abc:	c3 a0 00 00 	ret

00000ac0 <isr_null>:
     ac0:	c3 a0 00 00 	ret

00000ac4 <irq_handler>:
{
     ac4:	37 9c ff f0 	addi sp,sp,-16
     ac8:	5b 8b 00 10 	sw (sp+16),r11
     acc:	5b 8c 00 0c 	sw (sp+12),r12
     ad0:	5b 8d 00 08 	sw (sp+8),r13
     ad4:	5b 9d 00 04 	sw (sp+4),ra
	for(i=0; i<32; i++) {
     ad8:	78 02 00 00 	mvhi r2,0x0
     adc:	38 42 1a 90 	ori r2,r2,0x1a90
     ae0:	28 4b 00 00 	lw r11,(r2+0)
{
     ae4:	b8 20 60 00 	mv r12,r1
     ae8:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
     aec:	21 81 00 01 	andi r1,r12,0x1
     af0:	44 20 00 03 	be r1,r0,afc <irq_handler+0x38>
     af4:	29 61 00 00 	lw r1,(r11+0)
     af8:	d8 20 00 00 	call r1
		pending >>= 1;
     afc:	35 6b 00 04 	addi r11,r11,4
     b00:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
     b04:	5d ab ff fa 	bne r13,r11,aec <irq_handler+0x28>
}
     b08:	2b 9d 00 04 	lw ra,(sp+4)
     b0c:	2b 8b 00 10 	lw r11,(sp+16)
     b10:	2b 8c 00 0c 	lw r12,(sp+12)
     b14:	2b 8d 00 08 	lw r13,(sp+8)
     b18:	37 9c 00 10 	addi sp,sp,16
     b1c:	c3 a0 00 00 	ret

00000b20 <isr_init>:
	for(i=0; i<32; i++)
     b20:	78 02 00 00 	mvhi r2,0x0
     b24:	38 42 1a 94 	ori r2,r2,0x1a94
     b28:	28 41 00 00 	lw r1,(r2+0)
     b2c:	78 02 00 00 	mvhi r2,0x0
     b30:	38 42 1a 98 	ori r2,r2,0x1a98
     b34:	28 43 00 00 	lw r3,(r2+0)
     b38:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
     b3c:	58 23 00 00 	sw (r1+0),r3
     b40:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
     b44:	5c 22 ff fe 	bne r1,r2,b3c <isr_init+0x1c>
}
     b48:	c3 a0 00 00 	ret

00000b4c <isr_register>:
	isr_table[irq] = isr;
     b4c:	78 04 00 00 	mvhi r4,0x0
     b50:	38 84 1a 9c 	ori r4,r4,0x1a9c
     b54:	28 83 00 00 	lw r3,(r4+0)
     b58:	3c 21 00 02 	sli r1,r1,2
     b5c:	b4 61 18 00 	add r3,r3,r1
     b60:	58 62 00 00 	sw (r3+0),r2
}
     b64:	c3 a0 00 00 	ret

00000b68 <isr_unregister>:
	isr_table[irq] = &isr_null;
     b68:	78 03 00 00 	mvhi r3,0x0
     b6c:	38 63 1a a0 	ori r3,r3,0x1aa0
     b70:	28 62 00 00 	lw r2,(r3+0)
     b74:	3c 21 00 02 	sli r1,r1,2
     b78:	78 03 00 00 	mvhi r3,0x0
     b7c:	38 63 1a a4 	ori r3,r3,0x1aa4
     b80:	b4 41 10 00 	add r2,r2,r1
     b84:	28 61 00 00 	lw r1,(r3+0)
     b88:	58 41 00 00 	sw (r2+0),r1
}
     b8c:	c3 a0 00 00 	ret

00000b90 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
     b90:	78 03 00 00 	mvhi r3,0x0
     b94:	38 02 86 a0 	mvu r2,0x86a0
     b98:	78 42 00 01 	orhi r2,r2,0x1
     b9c:	38 63 1a a8 	ori r3,r3,0x1aa8
     ba0:	88 22 08 00 	mul r1,r1,r2
     ba4:	28 62 00 00 	lw r2,(r3+0)
     ba8:	28 42 00 00 	lw r2,(r2+0)
     bac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     bb0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
     bb4:	34 01 00 08 	mvi r1,8
     bb8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
     bbc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
     bc0:	20 21 00 01 	andi r1,r1,0x1
     bc4:	44 20 ff fe 	be r1,r0,bbc <msleep+0x2c>
}
     bc8:	c3 a0 00 00 	ret

00000bcc <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
     bcc:	78 03 00 00 	mvhi r3,0x0
     bd0:	38 63 1a ac 	ori r3,r3,0x1aac
     bd4:	28 62 00 00 	lw r2,(r3+0)
     bd8:	08 21 00 64 	muli r1,r1,100
     bdc:	28 42 00 00 	lw r2,(r2+0)
     be0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     be4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
     be8:	34 01 00 08 	mvi r1,8
     bec:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
     bf0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
     bf4:	20 21 00 01 	andi r1,r1,0x1
     bf8:	44 20 ff fe 	be r1,r0,bf0 <nsleep+0x24>
}
     bfc:	c3 a0 00 00 	ret

00000c00 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
     c00:	78 02 00 00 	mvhi r2,0x0
     c04:	38 42 1a b0 	ori r2,r2,0x1ab0
     c08:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
     c0c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
     c10:	34 02 27 10 	mvi r2,10000
     c14:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
     c18:	38 63 1a b4 	ori r3,r3,0x1ab4
	timer0->compare0 = (FCPU/10000);
     c1c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
     c20:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
     c24:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
     c28:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
     c2c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     c30:	34 02 00 0e 	mvi r2,14
     c34:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
     c38:	78 02 00 00 	mvhi r2,0x0
     c3c:	38 42 1a b8 	ori r2,r2,0x1ab8
     c40:	38 63 1a bc 	ori r3,r3,0x1abc
     c44:	28 41 00 00 	lw r1,(r2+0)
     c48:	28 62 00 00 	lw r2,(r3+0)
     c4c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
     c50:	c3 a0 00 00 	ret

00000c54 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
     c54:	c3 a0 00 00 	ret

00000c58 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     c58:	78 02 00 00 	mvhi r2,0x0
     c5c:	38 42 1a c0 	ori r2,r2,0x1ac0
     c60:	28 41 00 00 	lw r1,(r2+0)
     c64:	28 22 00 00 	lw r2,(r1+0)
     c68:	28 41 00 00 	lw r1,(r2+0)
     c6c:	20 21 00 01 	andi r1,r1,0x1
     c70:	44 20 ff fe 	be r1,r0,c68 <uart_getchar+0x10>
	return uart0->rxtx;
     c74:	28 41 00 04 	lw r1,(r2+4)
}
     c78:	20 21 00 ff 	andi r1,r1,0xff
     c7c:	c3 a0 00 00 	ret

00000c80 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
     c80:	78 03 00 00 	mvhi r3,0x0
     c84:	38 63 1a c4 	ori r3,r3,0x1ac4
     c88:	28 62 00 00 	lw r2,(r3+0)
{
     c8c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
     c90:	28 43 00 00 	lw r3,(r2+0)
     c94:	28 62 00 00 	lw r2,(r3+0)
     c98:	20 42 00 10 	andi r2,r2,0x10
     c9c:	5c 40 ff fe 	bne r2,r0,c94 <uart_putchar+0x14>
	uart0->rxtx = c;
     ca0:	58 61 00 04 	sw (r3+4),r1
}
     ca4:	c3 a0 00 00 	ret

00000ca8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
     ca8:	40 24 00 00 	lbu r4,(r1+0)
     cac:	44 80 00 0c 	be r4,r0,cdc <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
     cb0:	78 03 00 00 	mvhi r3,0x0
     cb4:	38 63 1a c8 	ori r3,r3,0x1ac8
     cb8:	28 62 00 00 	lw r2,(r3+0)
     cbc:	28 43 00 00 	lw r3,(r2+0)
     cc0:	28 62 00 00 	lw r2,(r3+0)
     cc4:	20 42 00 10 	andi r2,r2,0x10
     cc8:	5c 40 ff fe 	bne r2,r0,cc0 <uart_putstr+0x18>
	uart0->rxtx = c;
     ccc:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
     cd0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
     cd4:	40 24 00 00 	lbu r4,(r1+0)
     cd8:	5c 80 ff fa 	bne r4,r0,cc0 <uart_putstr+0x18>
	}
}
     cdc:	c3 a0 00 00 	ret

00000ce0 <uart1_init>:
     ce0:	c3 a0 00 00 	ret

00000ce4 <uart1_getchar>:
	//uart0->div = (FCPU/(57600*16));
}

char uart1_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;
     ce4:	78 02 00 00 	mvhi r2,0x0
     ce8:	38 42 1a cc 	ori r2,r2,0x1acc
     cec:	28 41 00 00 	lw r1,(r2+0)
     cf0:	28 22 00 00 	lw r2,(r1+0)
     cf4:	28 41 00 00 	lw r1,(r2+0)
     cf8:	20 21 00 01 	andi r1,r1,0x1
     cfc:	44 20 ff fe 	be r1,r0,cf4 <uart1_getchar+0x10>
	return uart1->rxtx;
     d00:	28 41 00 04 	lw r1,(r2+4)
}
     d04:	20 21 00 ff 	andi r1,r1,0xff
     d08:	c3 a0 00 00 	ret

00000d0c <uart1_putchar>:

void uart1_putchar(char c)
{
	while (uart1->ucr & UART_BUSY) ;
     d0c:	78 03 00 00 	mvhi r3,0x0
     d10:	38 63 1a d0 	ori r3,r3,0x1ad0
     d14:	28 62 00 00 	lw r2,(r3+0)
{
     d18:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
     d1c:	28 43 00 00 	lw r3,(r2+0)
     d20:	28 62 00 00 	lw r2,(r3+0)
     d24:	20 42 00 10 	andi r2,r2,0x10
     d28:	5c 40 ff fe 	bne r2,r0,d20 <uart1_putchar+0x14>
	uart1->rxtx = c;
     d2c:	58 61 00 04 	sw (r3+4),r1
}
     d30:	c3 a0 00 00 	ret

00000d34 <uart1_putstr>:

void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
     d34:	40 24 00 00 	lbu r4,(r1+0)
     d38:	44 80 00 0c 	be r4,r0,d68 <uart1_putstr+0x34>
	while (uart1->ucr & UART_BUSY) ;
     d3c:	78 03 00 00 	mvhi r3,0x0
     d40:	38 63 1a d4 	ori r3,r3,0x1ad4
     d44:	28 62 00 00 	lw r2,(r3+0)
     d48:	28 43 00 00 	lw r3,(r2+0)
     d4c:	28 62 00 00 	lw r2,(r3+0)
     d50:	20 42 00 10 	andi r2,r2,0x10
     d54:	5c 40 ff fe 	bne r2,r0,d4c <uart1_putstr+0x18>
	uart1->rxtx = c;
     d58:	58 64 00 04 	sw (r3+4),r4
		uart1_putchar(*c);
		c++;
     d5c:	34 21 00 01 	addi r1,r1,1
	while(*c) {
     d60:	40 24 00 00 	lbu r4,(r1+0)
     d64:	5c 80 ff fa 	bne r4,r0,d4c <uart1_putstr+0x18>
	}
}
     d68:	c3 a0 00 00 	ret

00000d6c <fifo_read>:
 * FIFO Functions
 */

uint8_t fifo_read()
{
	return fifo0->datout;
     d6c:	78 02 00 00 	mvhi r2,0x0
     d70:	38 42 1a d8 	ori r2,r2,0x1ad8
     d74:	28 41 00 00 	lw r1,(r2+0)
     d78:	28 21 00 00 	lw r1,(r1+0)
     d7c:	28 21 00 04 	lw r1,(r1+4)
}
     d80:	20 21 00 ff 	andi r1,r1,0xff
     d84:	c3 a0 00 00 	ret

00000d88 <fifo_write>:

void fifo_write(uint8_t c)
{
	fifo0->datin = c;
     d88:	78 03 00 00 	mvhi r3,0x0
     d8c:	38 63 1a dc 	ori r3,r3,0x1adc
     d90:	28 62 00 00 	lw r2,(r3+0)
{
     d94:	20 21 00 ff 	andi r1,r1,0xff
	fifo0->datin = c;
     d98:	28 42 00 00 	lw r2,(r2+0)
     d9c:	58 41 00 08 	sw (r2+8),r1
}
     da0:	c3 a0 00 00 	ret

00000da4 <fifo_state>:

uint8_t fifo_state()
{
	return fifo0->dat;
     da4:	78 02 00 00 	mvhi r2,0x0
     da8:	38 42 1a e0 	ori r2,r2,0x1ae0
     dac:	28 41 00 00 	lw r1,(r2+0)
     db0:	28 21 00 00 	lw r1,(r1+0)
     db4:	28 21 00 00 	lw r1,(r1+0)
}
     db8:	20 21 00 ff 	andi r1,r1,0xff
     dbc:	c3 a0 00 00 	ret

00000dc0 <fifo_reset>:

void fifo_reset()
{
	fifo0->reset = 1;
     dc0:	78 02 00 00 	mvhi r2,0x0
     dc4:	38 42 1a e4 	ori r2,r2,0x1ae4
     dc8:	28 41 00 00 	lw r1,(r2+0)
     dcc:	34 02 00 01 	mvi r2,1
     dd0:	28 21 00 00 	lw r1,(r1+0)
     dd4:	58 22 00 0c 	sw (r1+12),r2
}
     dd8:	c3 a0 00 00 	ret

00000ddc <_ZN3pwm5pauseEv>:
#include "pwm.h"

void pwm::pause(){
     ddc:	37 9c ff fc 	addi sp,sp,-4
     de0:	5b 9d 00 04 	sw (sp+4),ra

	msleep(1000);
     de4:	34 01 03 e8 	mvi r1,1000
     de8:	fb ff ff 6a 	calli b90 <msleep>

};
     dec:	2b 9d 00 04 	lw ra,(sp+4)
     df0:	37 9c 00 04 	addi sp,sp,4
     df4:	c3 a0 00 00 	ret

00000df8 <_ZN3pwm6pwm_enEij>:
void pwm::pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
     df8:	5c 40 00 08 	bne r2,r0,e18 <_ZN3pwm6pwm_enEij+0x20>
     dfc:	28 24 00 00 	lw r4,(r1+0)
     e00:	58 83 00 00 	sw (r4+0),r3
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
     e04:	34 04 00 05 	mvi r4,5
     e08:	5c 44 00 0d 	bne r2,r4,e3c <_ZN3pwm6pwm_enEij+0x44>
     e0c:	28 21 00 00 	lw r1,(r1+0)
     e10:	58 23 00 3c 	sw (r1+60),r3
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

};
     e14:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
     e18:	34 04 00 01 	mvi r4,1
     e1c:	5c 44 00 04 	bne r2,r4,e2c <_ZN3pwm6pwm_enEij+0x34>
     e20:	28 24 00 00 	lw r4,(r1+0)
     e24:	58 83 00 0c 	sw (r4+12),r3
	if(sel == 4) pwm0->en4 = val;
     e28:	e3 ff ff f7 	bi e04 <_ZN3pwm6pwm_enEij+0xc>
	if(sel == 2) pwm0->en2 = val;
     e2c:	34 04 00 02 	mvi r4,2
     e30:	5c 44 00 08 	bne r2,r4,e50 <_ZN3pwm6pwm_enEij+0x58>
     e34:	28 24 00 00 	lw r4,(r1+0)
     e38:	58 83 00 18 	sw (r4+24),r3
	if(sel == 6) pwm0->en6 = val;
     e3c:	34 04 00 06 	mvi r4,6
     e40:	5c 44 00 08 	bne r2,r4,e60 <_ZN3pwm6pwm_enEij+0x68>
     e44:	28 21 00 00 	lw r1,(r1+0)
     e48:	58 23 00 48 	sw (r1+72),r3
};
     e4c:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
     e50:	34 04 00 03 	mvi r4,3
     e54:	5c 44 00 08 	bne r2,r4,e74 <_ZN3pwm6pwm_enEij+0x7c>
     e58:	28 24 00 00 	lw r4,(r1+0)
     e5c:	58 83 00 24 	sw (r4+36),r3
	if(sel == 7) pwm0->en7 = val;
     e60:	34 04 00 07 	mvi r4,7
     e64:	5c 44 ff ec 	bne r2,r4,e14 <_ZN3pwm6pwm_enEij+0x1c>
     e68:	28 21 00 00 	lw r1,(r1+0)
     e6c:	58 23 00 54 	sw (r1+84),r3
};
     e70:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
     e74:	34 04 00 04 	mvi r4,4
     e78:	5c 44 ff e3 	bne r2,r4,e04 <_ZN3pwm6pwm_enEij+0xc>
     e7c:	28 21 00 00 	lw r1,(r1+0)
     e80:	58 23 00 30 	sw (r1+48),r3
};
     e84:	c3 a0 00 00 	ret

00000e88 <_ZN3pwm8pwm_dutyEij>:

void pwm::pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
     e88:	5c 40 00 08 	bne r2,r0,ea8 <_ZN3pwm8pwm_dutyEij+0x20>
     e8c:	28 24 00 00 	lw r4,(r1+0)
     e90:	58 83 00 08 	sw (r4+8),r3
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
     e94:	34 04 00 05 	mvi r4,5
     e98:	5c 44 00 0d 	bne r2,r4,ecc <_ZN3pwm8pwm_dutyEij+0x44>
     e9c:	28 21 00 00 	lw r1,(r1+0)
     ea0:	58 23 00 44 	sw (r1+68),r3
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

};
     ea4:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
     ea8:	34 04 00 01 	mvi r4,1
     eac:	5c 44 00 04 	bne r2,r4,ebc <_ZN3pwm8pwm_dutyEij+0x34>
     eb0:	28 24 00 00 	lw r4,(r1+0)
     eb4:	58 83 00 14 	sw (r4+20),r3
	if(sel == 4) pwm0->duty4 = val;
     eb8:	e3 ff ff f7 	bi e94 <_ZN3pwm8pwm_dutyEij+0xc>
	if(sel == 2) pwm0->duty2 = val;
     ebc:	34 04 00 02 	mvi r4,2
     ec0:	5c 44 00 08 	bne r2,r4,ee0 <_ZN3pwm8pwm_dutyEij+0x58>
     ec4:	28 24 00 00 	lw r4,(r1+0)
     ec8:	58 83 00 20 	sw (r4+32),r3
	if(sel == 6) pwm0->duty6 = val;
     ecc:	34 04 00 06 	mvi r4,6
     ed0:	5c 44 00 08 	bne r2,r4,ef0 <_ZN3pwm8pwm_dutyEij+0x68>
     ed4:	28 21 00 00 	lw r1,(r1+0)
     ed8:	58 23 00 50 	sw (r1+80),r3
};
     edc:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
     ee0:	34 04 00 03 	mvi r4,3
     ee4:	5c 44 00 08 	bne r2,r4,f04 <_ZN3pwm8pwm_dutyEij+0x7c>
     ee8:	28 24 00 00 	lw r4,(r1+0)
     eec:	58 83 00 2c 	sw (r4+44),r3
	if(sel == 7) pwm0->duty7 = val;
     ef0:	34 04 00 07 	mvi r4,7
     ef4:	5c 44 ff ec 	bne r2,r4,ea4 <_ZN3pwm8pwm_dutyEij+0x1c>
     ef8:	28 21 00 00 	lw r1,(r1+0)
     efc:	58 23 00 5c 	sw (r1+92),r3
};
     f00:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
     f04:	34 04 00 04 	mvi r4,4
     f08:	5c 44 ff e3 	bne r2,r4,e94 <_ZN3pwm8pwm_dutyEij+0xc>
     f0c:	28 21 00 00 	lw r1,(r1+0)
     f10:	58 23 00 38 	sw (r1+56),r3
};
     f14:	c3 a0 00 00 	ret

00000f18 <_ZN3pwm10pwm_periodEij>:

void pwm::pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
     f18:	5c 40 00 08 	bne r2,r0,f38 <_ZN3pwm10pwm_periodEij+0x20>
     f1c:	28 24 00 00 	lw r4,(r1+0)
     f20:	58 83 00 04 	sw (r4+4),r3
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
     f24:	34 04 00 05 	mvi r4,5
     f28:	5c 44 00 0d 	bne r2,r4,f5c <_ZN3pwm10pwm_periodEij+0x44>
     f2c:	28 21 00 00 	lw r1,(r1+0)
     f30:	58 23 00 40 	sw (r1+64),r3
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

};
     f34:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
     f38:	34 04 00 01 	mvi r4,1
     f3c:	5c 44 00 04 	bne r2,r4,f4c <_ZN3pwm10pwm_periodEij+0x34>
     f40:	28 24 00 00 	lw r4,(r1+0)
     f44:	58 83 00 10 	sw (r4+16),r3
	if(sel == 4) pwm0->period4 = val;
     f48:	e3 ff ff f7 	bi f24 <_ZN3pwm10pwm_periodEij+0xc>
	if(sel == 2) pwm0->period2 = val;
     f4c:	34 04 00 02 	mvi r4,2
     f50:	5c 44 00 08 	bne r2,r4,f70 <_ZN3pwm10pwm_periodEij+0x58>
     f54:	28 24 00 00 	lw r4,(r1+0)
     f58:	58 83 00 1c 	sw (r4+28),r3
	if(sel == 6) pwm0->period6 = val;
     f5c:	34 04 00 06 	mvi r4,6
     f60:	5c 44 00 08 	bne r2,r4,f80 <_ZN3pwm10pwm_periodEij+0x68>
     f64:	28 21 00 00 	lw r1,(r1+0)
     f68:	58 23 00 4c 	sw (r1+76),r3
};
     f6c:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
     f70:	34 04 00 03 	mvi r4,3
     f74:	5c 44 00 08 	bne r2,r4,f94 <_ZN3pwm10pwm_periodEij+0x7c>
     f78:	28 24 00 00 	lw r4,(r1+0)
     f7c:	58 83 00 28 	sw (r4+40),r3
	if(sel == 7) pwm0->period7 = val;
     f80:	34 04 00 07 	mvi r4,7
     f84:	5c 44 ff ec 	bne r2,r4,f34 <_ZN3pwm10pwm_periodEij+0x1c>
     f88:	28 21 00 00 	lw r1,(r1+0)
     f8c:	58 23 00 58 	sw (r1+88),r3
};
     f90:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
     f94:	34 04 00 04 	mvi r4,4
     f98:	5c 44 ff e3 	bne r2,r4,f24 <_ZN3pwm10pwm_periodEij+0xc>
     f9c:	28 21 00 00 	lw r1,(r1+0)
     fa0:	58 23 00 34 	sw (r1+52),r3
};
     fa4:	c3 a0 00 00 	ret

00000fa8 <_ZN3pwm9pwm_getenEj>:

uint32_t pwm::pwm_geten(uint32_t sel){
     fa8:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->en0;
     fac:	5c 40 00 04 	bne r2,r0,fbc <_ZN3pwm9pwm_getenEj+0x14>
     fb0:	28 21 00 00 	lw r1,(r1+0)
     fb4:	28 21 00 00 	lw r1,(r1+0)
	if(sel == 5) return pwm0->en5;
	if(sel == 6) return pwm0->en6;
	if(sel == 7) return pwm0->en7;
	return 0;

};
     fb8:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
     fbc:	34 01 00 01 	mvi r1,1
     fc0:	44 41 00 14 	be r2,r1,1010 <_RAM_END+0x10>
	if(sel == 2) return pwm0->en2;
     fc4:	34 01 00 02 	mvi r1,2
     fc8:	44 41 00 15 	be r2,r1,101c <_RAM_END+0x1c>
	if(sel == 3) return pwm0->en3;
     fcc:	34 01 00 03 	mvi r1,3
     fd0:	44 41 00 0d 	be r2,r1,1004 <_RAM_END+0x4>
	if(sel == 4) return pwm0->en4;
     fd4:	34 01 00 04 	mvi r1,4
     fd8:	44 41 00 17 	be r2,r1,1034 <_RAM_END+0x34>
	if(sel == 5) return pwm0->en5;
     fdc:	34 01 00 05 	mvi r1,5
     fe0:	44 41 00 18 	be r2,r1,1040 <_RAM_END+0x40>
	if(sel == 6) return pwm0->en6;
     fe4:	34 01 00 06 	mvi r1,6
     fe8:	44 41 00 10 	be r2,r1,1028 <_RAM_END+0x28>
	if(sel == 7) return pwm0->en7;
     fec:	34 04 00 07 	mvi r4,7
	return 0;
     ff0:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->en7;
     ff4:	5c 44 ff f1 	bne r2,r4,fb8 <_ZN3pwm9pwm_getenEj+0x10>
     ff8:	28 61 00 00 	lw r1,(r3+0)
     ffc:	28 21 00 54 	lw r1,(r1+84)
};
    1000:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
    1004:	28 61 00 00 	lw r1,(r3+0)
    1008:	28 21 00 24 	lw r1,(r1+36)
};
    100c:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
    1010:	28 61 00 00 	lw r1,(r3+0)
    1014:	28 21 00 0c 	lw r1,(r1+12)
};
    1018:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
    101c:	28 61 00 00 	lw r1,(r3+0)
    1020:	28 21 00 18 	lw r1,(r1+24)
};
    1024:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
    1028:	28 61 00 00 	lw r1,(r3+0)
    102c:	28 21 00 48 	lw r1,(r1+72)
};
    1030:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
    1034:	28 61 00 00 	lw r1,(r3+0)
    1038:	28 21 00 30 	lw r1,(r1+48)
};
    103c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
    1040:	28 61 00 00 	lw r1,(r3+0)
    1044:	28 21 00 3c 	lw r1,(r1+60)
};
    1048:	c3 a0 00 00 	ret

0000104c <_ZN3pwm11pwm_getdutyEj>:

uint32_t pwm::pwm_getduty(uint32_t sel){
    104c:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->duty0;
    1050:	5c 40 00 04 	bne r2,r0,1060 <_ZN3pwm11pwm_getdutyEj+0x14>
    1054:	28 21 00 00 	lw r1,(r1+0)
    1058:	28 21 00 08 	lw r1,(r1+8)
	if(sel == 5) return pwm0->duty5;
	if(sel == 6) return pwm0->duty6;
	if(sel == 7) return pwm0->duty7;
	return 0;
	
};
    105c:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
    1060:	34 01 00 01 	mvi r1,1
    1064:	44 41 00 14 	be r2,r1,10b4 <_ZN3pwm11pwm_getdutyEj+0x68>
	if(sel == 2) return pwm0->duty2;
    1068:	34 01 00 02 	mvi r1,2
    106c:	44 41 00 15 	be r2,r1,10c0 <_ZN3pwm11pwm_getdutyEj+0x74>
	if(sel == 3) return pwm0->duty3;
    1070:	34 01 00 03 	mvi r1,3
    1074:	44 41 00 0d 	be r2,r1,10a8 <_ZN3pwm11pwm_getdutyEj+0x5c>
	if(sel == 4) return pwm0->duty4;
    1078:	34 01 00 04 	mvi r1,4
    107c:	44 41 00 17 	be r2,r1,10d8 <_ZN3pwm11pwm_getdutyEj+0x8c>
	if(sel == 5) return pwm0->duty5;
    1080:	34 01 00 05 	mvi r1,5
    1084:	44 41 00 18 	be r2,r1,10e4 <_ZN3pwm11pwm_getdutyEj+0x98>
	if(sel == 6) return pwm0->duty6;
    1088:	34 01 00 06 	mvi r1,6
    108c:	44 41 00 10 	be r2,r1,10cc <_ZN3pwm11pwm_getdutyEj+0x80>
	if(sel == 7) return pwm0->duty7;
    1090:	34 04 00 07 	mvi r4,7
	return 0;
    1094:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->duty7;
    1098:	5c 44 ff f1 	bne r2,r4,105c <_ZN3pwm11pwm_getdutyEj+0x10>
    109c:	28 61 00 00 	lw r1,(r3+0)
    10a0:	28 21 00 5c 	lw r1,(r1+92)
};
    10a4:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
    10a8:	28 61 00 00 	lw r1,(r3+0)
    10ac:	28 21 00 2c 	lw r1,(r1+44)
};
    10b0:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
    10b4:	28 61 00 00 	lw r1,(r3+0)
    10b8:	28 21 00 14 	lw r1,(r1+20)
};
    10bc:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
    10c0:	28 61 00 00 	lw r1,(r3+0)
    10c4:	28 21 00 20 	lw r1,(r1+32)
};
    10c8:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
    10cc:	28 61 00 00 	lw r1,(r3+0)
    10d0:	28 21 00 50 	lw r1,(r1+80)
};
    10d4:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
    10d8:	28 61 00 00 	lw r1,(r3+0)
    10dc:	28 21 00 38 	lw r1,(r1+56)
};
    10e0:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
    10e4:	28 61 00 00 	lw r1,(r3+0)
    10e8:	28 21 00 44 	lw r1,(r1+68)
};
    10ec:	c3 a0 00 00 	ret

000010f0 <_ZN3pwm13pwm_getperiodEj>:

uint32_t pwm::pwm_getperiod(uint32_t sel){
    10f0:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->period0;
    10f4:	5c 40 00 04 	bne r2,r0,1104 <_ZN3pwm13pwm_getperiodEj+0x14>
    10f8:	28 21 00 00 	lw r1,(r1+0)
    10fc:	28 21 00 04 	lw r1,(r1+4)
	if(sel == 5) return pwm0->period5;
	if(sel == 6) return pwm0->period6;
	if(sel == 7) return pwm0->period7;
	return 0;
	
    1100:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
    1104:	34 01 00 01 	mvi r1,1
    1108:	44 41 00 14 	be r2,r1,1158 <_ZN3pwm13pwm_getperiodEj+0x68>
	if(sel == 2) return pwm0->period2;
    110c:	34 01 00 02 	mvi r1,2
    1110:	44 41 00 15 	be r2,r1,1164 <_ZN3pwm13pwm_getperiodEj+0x74>
	if(sel == 3) return pwm0->period3;
    1114:	34 01 00 03 	mvi r1,3
    1118:	44 41 00 0d 	be r2,r1,114c <_ZN3pwm13pwm_getperiodEj+0x5c>
	if(sel == 4) return pwm0->period4;
    111c:	34 01 00 04 	mvi r1,4
    1120:	44 41 00 17 	be r2,r1,117c <_ZN3pwm13pwm_getperiodEj+0x8c>
	if(sel == 5) return pwm0->period5;
    1124:	34 01 00 05 	mvi r1,5
    1128:	44 41 00 18 	be r2,r1,1188 <_ZN3pwm13pwm_getperiodEj+0x98>
	if(sel == 6) return pwm0->period6;
    112c:	34 01 00 06 	mvi r1,6
    1130:	44 41 00 10 	be r2,r1,1170 <_ZN3pwm13pwm_getperiodEj+0x80>
	if(sel == 7) return pwm0->period7;
    1134:	34 04 00 07 	mvi r4,7
	return 0;
    1138:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->period7;
    113c:	5c 44 ff f1 	bne r2,r4,1100 <_ZN3pwm13pwm_getperiodEj+0x10>
    1140:	28 61 00 00 	lw r1,(r3+0)
    1144:	28 21 00 58 	lw r1,(r1+88)
    1148:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
    114c:	28 61 00 00 	lw r1,(r3+0)
    1150:	28 21 00 28 	lw r1,(r1+40)
    1154:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
    1158:	28 61 00 00 	lw r1,(r3+0)
    115c:	28 21 00 10 	lw r1,(r1+16)
    1160:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
    1164:	28 61 00 00 	lw r1,(r3+0)
    1168:	28 21 00 1c 	lw r1,(r1+28)
    116c:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
    1170:	28 61 00 00 	lw r1,(r3+0)
    1174:	28 21 00 4c 	lw r1,(r1+76)
    1178:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
    117c:	28 61 00 00 	lw r1,(r3+0)
    1180:	28 21 00 34 	lw r1,(r1+52)
    1184:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
    1188:	28 61 00 00 	lw r1,(r3+0)
    118c:	28 21 00 40 	lw r1,(r1+64)
    1190:	c3 a0 00 00 	ret

00001194 <_ZN3arm4initEv>:
#include "servos.h"

void arm::init(){
    1194:	37 9c ff f8 	addi sp,sp,-8
    1198:	5b 8b 00 08 	sw (sp+8),r11
    119c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,atr);
    11a0:	28 23 00 18 	lw r3,(r1+24)
    11a4:	28 22 00 08 	lw r2,(r1+8)
void arm::init(){
    11a8:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,atr);
    11ac:	fb ff ff 37 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    11b0:	b9 60 08 00 	mv r1,r11
    11b4:	fb ff ff 0a 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
    11b8:	29 63 00 14 	lw r3,(r11+20)
    11bc:	29 62 00 04 	lw r2,(r11+4)
    11c0:	b9 60 08 00 	mv r1,r11
    11c4:	fb ff ff 31 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    11c8:	b9 60 08 00 	mv r1,r11
    11cc:	fb ff ff 04 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
    11d0:	29 63 00 1c 	lw r3,(r11+28)
    11d4:	29 62 00 08 	lw r2,(r11+8)
    11d8:	b9 60 08 00 	mv r1,r11
    11dc:	fb ff ff 2b 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    11e0:	b9 60 08 00 	mv r1,r11
    11e4:	fb ff fe fe 	calli ddc <_ZN3pwm5pauseEv>
};
    11e8:	2b 9d 00 04 	lw ra,(sp+4)
    11ec:	2b 8b 00 08 	lw r11,(sp+8)
    11f0:	37 9c 00 08 	addi sp,sp,8
    11f4:	c3 a0 00 00 	ret

000011f8 <_ZN3arm4homeEv>:

void arm::home(){
    11f8:	37 9c ff f8 	addi sp,sp,-8
    11fc:	5b 8b 00 08 	sw (sp+8),r11
    1200:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,atr);
    1204:	28 23 00 18 	lw r3,(r1+24)
    1208:	28 22 00 08 	lw r2,(r1+8)
void arm::home(){
    120c:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,atr);
    1210:	fb ff ff 1e 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    1214:	b9 60 08 00 	mv r1,r11
    1218:	fb ff fe f1 	calli ddc <_ZN3pwm5pauseEv>
};
    121c:	2b 9d 00 04 	lw ra,(sp+4)
    1220:	2b 8b 00 08 	lw r11,(sp+8)
    1224:	37 9c 00 08 	addi sp,sp,8
    1228:	c3 a0 00 00 	ret

0000122c <_ZN3arm7derechaEv>:

void arm::derecha(){
    122c:	37 9c ff f8 	addi sp,sp,-8
    1230:	5b 8b 00 08 	sw (sp+8),r11
    1234:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,der);
    1238:	28 23 00 0c 	lw r3,(r1+12)
    123c:	28 22 00 04 	lw r2,(r1+4)
void arm::derecha(){
    1240:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,der);
    1244:	fb ff ff 11 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    1248:	b9 60 08 00 	mv r1,r11
    124c:	fb ff fe e4 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv2,atr);
    1250:	29 63 00 18 	lw r3,(r11+24)
    1254:	29 62 00 08 	lw r2,(r11+8)
    1258:	b9 60 08 00 	mv r1,r11
    125c:	fb ff ff 0b 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    1260:	b9 60 08 00 	mv r1,r11
    1264:	fb ff fe de 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
    1268:	29 63 00 14 	lw r3,(r11+20)
    126c:	29 62 00 04 	lw r2,(r11+4)
    1270:	b9 60 08 00 	mv r1,r11
    1274:	fb ff ff 05 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    1278:	b9 60 08 00 	mv r1,r11
    127c:	fb ff fe d8 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
    1280:	29 63 00 1c 	lw r3,(r11+28)
    1284:	29 62 00 08 	lw r2,(r11+8)
    1288:	b9 60 08 00 	mv r1,r11
    128c:	fb ff fe ff 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    1290:	b9 60 08 00 	mv r1,r11
    1294:	fb ff fe d2 	calli ddc <_ZN3pwm5pauseEv>
};
    1298:	2b 9d 00 04 	lw ra,(sp+4)
    129c:	2b 8b 00 08 	lw r11,(sp+8)
    12a0:	37 9c 00 08 	addi sp,sp,8
    12a4:	c3 a0 00 00 	ret

000012a8 <_ZN3arm9izquierdaEv>:

void arm::izquierda(){
    12a8:	37 9c ff f8 	addi sp,sp,-8
    12ac:	5b 8b 00 08 	sw (sp+8),r11
    12b0:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,iz);
    12b4:	28 23 00 10 	lw r3,(r1+16)
    12b8:	28 22 00 04 	lw r2,(r1+4)
void arm::izquierda(){
    12bc:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,iz);
    12c0:	fb ff fe f2 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    12c4:	b9 60 08 00 	mv r1,r11
    12c8:	fb ff fe c5 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv2,atr);
    12cc:	29 63 00 18 	lw r3,(r11+24)
    12d0:	29 62 00 08 	lw r2,(r11+8)
    12d4:	b9 60 08 00 	mv r1,r11
    12d8:	fb ff fe ec 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    12dc:	b9 60 08 00 	mv r1,r11
    12e0:	fb ff fe bf 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
    12e4:	29 63 00 14 	lw r3,(r11+20)
    12e8:	29 62 00 04 	lw r2,(r11+4)
    12ec:	b9 60 08 00 	mv r1,r11
    12f0:	fb ff fe e6 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    12f4:	b9 60 08 00 	mv r1,r11
    12f8:	fb ff fe b9 	calli ddc <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
    12fc:	29 63 00 1c 	lw r3,(r11+28)
    1300:	29 62 00 08 	lw r2,(r11+8)
    1304:	b9 60 08 00 	mv r1,r11
    1308:	fb ff fe e0 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pause();
    130c:	b9 60 08 00 	mv r1,r11
    1310:	fb ff fe b3 	calli ddc <_ZN3pwm5pauseEv>
};
    1314:	2b 9d 00 04 	lw ra,(sp+4)
    1318:	2b 8b 00 08 	lw r11,(sp+8)
    131c:	37 9c 00 08 	addi sp,sp,8
    1320:	c3 a0 00 00 	ret

00001324 <_ZN3arm8set_servEii>:

void arm::set_serv(int x,int y){
    1324:	37 9c ff f8 	addi sp,sp,-8
    1328:	5b 8b 00 08 	sw (sp+8),r11
    132c:	5b 9d 00 04 	sw (sp+4),ra
	serv1 = x;
	serv2 = y;

	der = DER;
	iz  = IZ;
    1330:	34 04 00 05 	mvi r4,5
    1334:	58 24 00 10 	sw (r1+16),r4
	mid = MID;
    1338:	34 04 00 0d 	mvi r4,13
    133c:	58 24 00 14 	sw (r1+20),r4

	atr = ATR;
    1340:	34 04 00 12 	mvi r4,18
	serv2 = y;
    1344:	58 23 00 08 	sw (r1+8),r3
	atr = ATR;
    1348:	58 24 00 18 	sw (r1+24),r4
	der = DER;
    134c:	34 03 00 19 	mvi r3,25
	ade = ADE;
    1350:	34 04 00 0c 	mvi r4,12
    1354:	58 24 00 1c 	sw (r1+28),r4
	serv1 = x;
    1358:	58 22 00 04 	sw (r1+4),r2
	der = DER;
    135c:	58 23 00 0c 	sw (r1+12),r3

	pwm_period(serv1,200);
    1360:	34 03 00 c8 	mvi r3,200
void arm::set_serv(int x,int y){
    1364:	b8 20 58 00 	mv r11,r1
	pwm_period(serv1,200);
    1368:	fb ff fe ec 	calli f18 <_ZN3pwm10pwm_periodEij>
	pwm_period(serv2,200);
    136c:	29 62 00 08 	lw r2,(r11+8)
    1370:	b9 60 08 00 	mv r1,r11
    1374:	34 03 00 c8 	mvi r3,200
    1378:	fb ff fe e8 	calli f18 <_ZN3pwm10pwm_periodEij>
	pwm_duty(serv1,mid);
    137c:	29 63 00 14 	lw r3,(r11+20)
    1380:	29 62 00 04 	lw r2,(r11+4)
    1384:	b9 60 08 00 	mv r1,r11
    1388:	fb ff fe c0 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pwm_duty(serv2,atr);
    138c:	29 63 00 18 	lw r3,(r11+24)
    1390:	29 62 00 08 	lw r2,(r11+8)
    1394:	b9 60 08 00 	mv r1,r11
    1398:	fb ff fe bc 	calli e88 <_ZN3pwm8pwm_dutyEij>
	pwm_en(serv1,1);
    139c:	29 62 00 04 	lw r2,(r11+4)
    13a0:	b9 60 08 00 	mv r1,r11
    13a4:	34 03 00 01 	mvi r3,1
    13a8:	fb ff fe 94 	calli df8 <_ZN3pwm6pwm_enEij>
	pwm_en(serv2,1);
    13ac:	29 62 00 08 	lw r2,(r11+8)
    13b0:	34 03 00 01 	mvi r3,1
    13b4:	b9 60 08 00 	mv r1,r11
    13b8:	fb ff fe 90 	calli df8 <_ZN3pwm6pwm_enEij>
	pause();
    13bc:	b9 60 08 00 	mv r1,r11
    13c0:	fb ff fe 87 	calli ddc <_ZN3pwm5pauseEv>
};
    13c4:	2b 9d 00 04 	lw ra,(sp+4)
    13c8:	2b 8b 00 08 	lw r11,(sp+8)
    13cc:	37 9c 00 08 	addi sp,sp,8
    13d0:	c3 a0 00 00 	ret

000013d4 <_ZN3arm5calibEci>:

void arm::calib(char dir,int val){
    13d4:	20 42 00 ff 	andi r2,r2,0xff
	if(dir == 0x20){
    13d8:	34 04 00 20 	mvi r4,32
    13dc:	44 44 00 09 	be r2,r4,1400 <_ZN3arm5calibEci+0x2c>
		der = val;
	}
	if(dir == 0x21){
    13e0:	34 04 00 21 	mvi r4,33
    13e4:	5c 44 00 03 	bne r2,r4,13f0 <_ZN3arm5calibEci+0x1c>
		iz = val;
    13e8:	58 23 00 10 	sw (r1+16),r3
		atr = val;
	}
	if(dir == 0x24){
		ade = val;
	}
};
    13ec:	c3 a0 00 00 	ret
	if(dir == 0x22){
    13f0:	34 04 00 22 	mvi r4,34
    13f4:	5c 44 00 05 	bne r2,r4,1408 <_ZN3arm5calibEci+0x34>
		mid = val;
    13f8:	58 23 00 14 	sw (r1+20),r3
};
    13fc:	c3 a0 00 00 	ret
		der = val;
    1400:	58 23 00 0c 	sw (r1+12),r3
};
    1404:	c3 a0 00 00 	ret
	if(dir == 0x23){
    1408:	34 04 00 23 	mvi r4,35
    140c:	5c 44 00 03 	bne r2,r4,1418 <_ZN3arm5calibEci+0x44>
		atr = val;
    1410:	58 23 00 18 	sw (r1+24),r3
};
    1414:	c3 a0 00 00 	ret
	if(dir == 0x24){
    1418:	34 04 00 24 	mvi r4,36
    141c:	5c 44 ff f4 	bne r2,r4,13ec <_ZN3arm5calibEci+0x18>
		ade = val;
    1420:	58 23 00 1c 	sw (r1+28),r3
};
    1424:	c3 a0 00 00 	ret

00001428 <_ZN3cam5resetEv>:
#pragma GCC diagnostic ignored "-Wwrite-strings"
#include "cam.h"

void cam::reset(){
    1428:	37 9c ff f4 	addi sp,sp,-12
    142c:	5b 8b 00 0c 	sw (sp+12),r11
    1430:	5b 8c 00 08 	sw (sp+8),r12
    1434:	5b 9d 00 04 	sw (sp+4),ra

	char R1;
	char R2;

	for(int i = 0;i < 4;i++){
		uart1_putchar(RESET_CAMERA[i]);
    1438:	34 01 00 56 	mvi r1,86
    143c:	fb ff fe 34 	calli d0c <uart1_putchar>
    1440:	34 01 00 00 	mvi r1,0
    1444:	fb ff fe 32 	calli d0c <uart1_putchar>
    1448:	34 01 00 26 	mvi r1,38
    144c:	fb ff fe 30 	calli d0c <uart1_putchar>
    1450:	34 01 00 00 	mvi r1,0
    1454:	fb ff fe 2e 	calli d0c <uart1_putchar>
	}

	R1 = uart1_getchar();
    1458:	fb ff fe 23 	calli ce4 <uart1_getchar>
    145c:	b8 20 60 00 	mv r12,r1
    1460:	34 0b 00 46 	mvi r11,70

	for(int i = 0;i < 70;i++){
		R2 = uart1_getchar();
    1464:	35 6b ff ff 	addi r11,r11,-1
    1468:	fb ff fe 1f 	calli ce4 <uart1_getchar>
	for(int i = 0;i < 70;i++){
    146c:	5d 60 ff fe 	bne r11,r0,1464 <_ZN3cam5resetEv+0x3c>
	}

	if(R1 == 0x76 && R2 == 0x0a){
    1470:	65 8c 00 76 	cmpei r12,r12,118
    1474:	64 21 00 0a 	cmpei r1,r1,10
    1478:	a1 81 08 00 	and r1,r12,r1
    147c:	5c 20 00 06 	bne r1,r0,1494 <_ZN3cam5resetEv+0x6c>
		uart_putstr("Ok");
	}
	

};
    1480:	2b 9d 00 04 	lw ra,(sp+4)
    1484:	2b 8b 00 0c 	lw r11,(sp+12)
    1488:	2b 8c 00 08 	lw r12,(sp+8)
    148c:	37 9c 00 0c 	addi sp,sp,12
    1490:	c3 a0 00 00 	ret
		uart_putstr("Ok");
    1494:	78 02 00 00 	mvhi r2,0x0
    1498:	38 42 1a fc 	ori r2,r2,0x1afc
    149c:	28 41 00 00 	lw r1,(r2+0)
    14a0:	fb ff fe 02 	calli ca8 <uart_putstr>
};
    14a4:	2b 9d 00 04 	lw ra,(sp+4)
    14a8:	2b 8b 00 0c 	lw r11,(sp+12)
    14ac:	2b 8c 00 08 	lw r12,(sp+8)
    14b0:	37 9c 00 0c 	addi sp,sp,12
    14b4:	c3 a0 00 00 	ret

000014b8 <_ZN3cam11takepictureEv>:

void cam::takepicture(){
    14b8:	37 9c ff e0 	addi sp,sp,-32
    14bc:	5b 8b 00 0c 	sw (sp+12),r11
    14c0:	5b 8c 00 08 	sw (sp+8),r12
    14c4:	5b 9d 00 04 	sw (sp+4),ra

	uint32_t Z [5];

	for(int i = 0;i < 5;i++){
		uart1_putchar(TAKE_PICTURE[i]);
    14c8:	78 01 00 00 	mvhi r1,0x0
    14cc:	38 21 1b 00 	ori r1,r1,0x1b00
    14d0:	28 2b 00 00 	lw r11,(r1+0)
void cam::takepicture(){
    14d4:	34 01 00 56 	mvi r1,86
		uart1_putchar(TAKE_PICTURE[i]);
    14d8:	20 21 00 ff 	andi r1,r1,0xff
    14dc:	35 6c 00 14 	addi r12,r11,20
    14e0:	35 6b 00 04 	addi r11,r11,4
    14e4:	fb ff fe 0a 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    14e8:	45 6c 00 06 	be r11,r12,1500 <_ZN3cam11takepictureEv+0x48>
    14ec:	29 61 00 00 	lw r1,(r11+0)
		uart1_putchar(TAKE_PICTURE[i]);
    14f0:	35 6b 00 04 	addi r11,r11,4
    14f4:	20 21 00 ff 	andi r1,r1,0xff
    14f8:	fb ff fe 05 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    14fc:	5d 6c ff fc 	bne r11,r12,14ec <_ZN3cam11takepictureEv+0x34>
    1500:	37 8b 00 10 	addi r11,sp,16
    1504:	37 8c 00 24 	addi r12,sp,36
	}

	for(int i = 0;i < 5;i++){
		Z[i] = uart1_getchar();
    1508:	fb ff fd f7 	calli ce4 <uart1_getchar>
    150c:	59 61 00 00 	sw (r11+0),r1
    1510:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 5;i++){
    1514:	5d 6c ff fd 	bne r11,r12,1508 <_ZN3cam11takepictureEv+0x50>
	}


	if(Z[0] == 0x76 && Z[2] == 0x36){
    1518:	2b 82 00 10 	lw r2,(sp+16)
    151c:	34 01 00 76 	mvi r1,118
    1520:	44 41 00 06 	be r2,r1,1538 <_ZN3cam11takepictureEv+0x80>
		uart_putstr("Ok");	}

};
    1524:	2b 9d 00 04 	lw ra,(sp+4)
    1528:	2b 8b 00 0c 	lw r11,(sp+12)
    152c:	2b 8c 00 08 	lw r12,(sp+8)
    1530:	37 9c 00 20 	addi sp,sp,32
    1534:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x36){
    1538:	2b 82 00 18 	lw r2,(sp+24)
    153c:	34 01 00 36 	mvi r1,54
    1540:	5c 41 ff f9 	bne r2,r1,1524 <_ZN3cam11takepictureEv+0x6c>
		uart_putstr("Ok");	}
    1544:	78 02 00 00 	mvhi r2,0x0
    1548:	38 42 1b 04 	ori r2,r2,0x1b04
    154c:	28 41 00 00 	lw r1,(r2+0)
    1550:	fb ff fd d6 	calli ca8 <uart_putstr>
};
    1554:	e3 ff ff f4 	bi 1524 <_ZN3cam11takepictureEv+0x6c>

00001558 <_ZN3cam7getsizeEv>:

void cam::getsize(){
    1558:	37 9c ff cc 	addi sp,sp,-52
    155c:	5b 8b 00 10 	sw (sp+16),r11
    1560:	5b 8c 00 0c 	sw (sp+12),r12
    1564:	5b 8d 00 08 	sw (sp+8),r13
    1568:	5b 9d 00 04 	sw (sp+4),ra

	uint32_t Z [9];

	for(int i = 0;i < 5;i++){
		uart1_putchar(GET_SIZE[i]);
    156c:	78 02 00 00 	mvhi r2,0x0
    1570:	38 42 1b 08 	ori r2,r2,0x1b08
    1574:	28 4b 00 00 	lw r11,(r2+0)
void cam::getsize(){
    1578:	b8 20 68 00 	mv r13,r1
    157c:	34 01 00 56 	mvi r1,86
    1580:	35 6c 00 14 	addi r12,r11,20
		uart1_putchar(GET_SIZE[i]);
    1584:	20 21 00 ff 	andi r1,r1,0xff
    1588:	35 6b 00 04 	addi r11,r11,4
    158c:	fb ff fd e0 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1590:	45 6c 00 06 	be r11,r12,15a8 <_ZN3cam7getsizeEv+0x50>
    1594:	29 61 00 00 	lw r1,(r11+0)
		uart1_putchar(GET_SIZE[i]);
    1598:	35 6b 00 04 	addi r11,r11,4
    159c:	20 21 00 ff 	andi r1,r1,0xff
    15a0:	fb ff fd db 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    15a4:	5d 6c ff fc 	bne r11,r12,1594 <_ZN3cam7getsizeEv+0x3c>
    15a8:	37 8b 00 14 	addi r11,sp,20
    15ac:	37 8c 00 38 	addi r12,sp,56
	}

	for(int i = 0;i < 9;i++){
		Z[i] = uart1_getchar();
    15b0:	fb ff fd cd 	calli ce4 <uart1_getchar>
    15b4:	59 61 00 00 	sw (r11+0),r1
    15b8:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 9;i++){
    15bc:	5d 6c ff fd 	bne r11,r12,15b0 <_ZN3cam7getsizeEv+0x58>
	}

	if(Z[0] == 0x76 && Z[2] == 0x34){
    15c0:	2b 82 00 14 	lw r2,(sp+20)
    15c4:	34 01 00 76 	mvi r1,118
    15c8:	44 41 00 07 	be r2,r1,15e4 <_ZN3cam7getsizeEv+0x8c>
		xl = Z[8];

		uart_putchar(xh);
		uart_putchar(xl);
	}
};
    15cc:	2b 9d 00 04 	lw ra,(sp+4)
    15d0:	2b 8b 00 10 	lw r11,(sp+16)
    15d4:	2b 8c 00 0c 	lw r12,(sp+12)
    15d8:	2b 8d 00 08 	lw r13,(sp+8)
    15dc:	37 9c 00 34 	addi sp,sp,52
    15e0:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x34){
    15e4:	2b 82 00 1c 	lw r2,(sp+28)
    15e8:	34 01 00 34 	mvi r1,52
    15ec:	5c 41 ff f8 	bne r2,r1,15cc <_ZN3cam7getsizeEv+0x74>
		uart_putstr("Ok");
    15f0:	78 02 00 00 	mvhi r2,0x0
    15f4:	38 42 1b 0c 	ori r2,r2,0x1b0c
    15f8:	28 41 00 00 	lw r1,(r2+0)
    15fc:	fb ff fd ab 	calli ca8 <uart_putstr>
		xh = Z[7];
    1600:	2b 82 00 30 	lw r2,(sp+48)
		uart_putchar(xh);
    1604:	20 41 00 ff 	andi r1,r2,0xff
		xh = Z[7];
    1608:	31 a2 00 00 	sb (r13+0),r2
		xl = Z[8];
    160c:	2b 82 00 34 	lw r2,(sp+52)
    1610:	31 a2 00 01 	sb (r13+1),r2
		uart_putchar(xh);
    1614:	fb ff fd 9b 	calli c80 <uart_putchar>
		uart_putchar(xl);
    1618:	41 a1 00 01 	lbu r1,(r13+1)
    161c:	fb ff fd 99 	calli c80 <uart_putchar>
};
    1620:	e3 ff ff eb 	bi 15cc <_ZN3cam7getsizeEv+0x74>

00001624 <_ZN3cam11sendpictureEv>:

void cam::sendpicture(){
    1624:	37 9c ff a0 	addi sp,sp,-96
    1628:	5b 8b 00 18 	sw (sp+24),r11
    162c:	5b 8c 00 14 	sw (sp+20),r12
    1630:	5b 8d 00 10 	sw (sp+16),r13
    1634:	5b 8e 00 0c 	sw (sp+12),r14
    1638:	5b 8f 00 08 	sw (sp+8),r15
    163c:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t Z [9];
	uint32_t X [9];
	char R1;

	for(int i = 0;i < 5;i++){
		uart1_putchar(GET_SIZE[i]);
    1640:	78 02 00 00 	mvhi r2,0x0
    1644:	38 42 1b 10 	ori r2,r2,0x1b10
    1648:	28 4b 00 00 	lw r11,(r2+0)
void cam::sendpicture(){
    164c:	b8 20 68 00 	mv r13,r1
    1650:	34 01 00 56 	mvi r1,86
    1654:	35 6c 00 14 	addi r12,r11,20
		uart1_putchar(GET_SIZE[i]);
    1658:	20 21 00 ff 	andi r1,r1,0xff
    165c:	35 6b 00 04 	addi r11,r11,4
    1660:	fb ff fd ab 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1664:	45 6c 00 06 	be r11,r12,167c <_ZN3cam11sendpictureEv+0x58>
    1668:	29 61 00 00 	lw r1,(r11+0)
		uart1_putchar(GET_SIZE[i]);
    166c:	35 6b 00 04 	addi r11,r11,4
    1670:	20 21 00 ff 	andi r1,r1,0xff
    1674:	fb ff fd a6 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1678:	5d 6c ff fc 	bne r11,r12,1668 <_ZN3cam11sendpictureEv+0x44>
    167c:	37 8b 00 40 	addi r11,sp,64
    1680:	37 8c 00 64 	addi r12,sp,100
	}

	for(int i = 0;i < 9;i++){
		X[i] = uart1_getchar();
    1684:	fb ff fd 98 	calli ce4 <uart1_getchar>
    1688:	59 61 00 00 	sw (r11+0),r1
    168c:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 9;i++){
    1690:	5d 6c ff fd 	bne r11,r12,1684 <_ZN3cam11sendpictureEv+0x60>
	}

	if(X[0] == 0x76 && X[2] == 0x34){
    1694:	2b 82 00 40 	lw r2,(sp+64)
    1698:	34 01 00 76 	mvi r1,118
    169c:	2b 8e 00 5c 	lw r14,(sp+92)
    16a0:	2b 8f 00 60 	lw r15,(sp+96)
    16a4:	44 41 00 2a 	be r2,r1,174c <_ZN3cam11sendpictureEv+0x128>
    16a8:	41 a1 00 00 	lbu r1,(r13+0)
		xh = X[7];
		xl = X[8];
	}

	uart_putchar(xh);
    16ac:	fb ff fd 75 	calli c80 <uart_putchar>
	uart_putchar(xl);
    16b0:	78 02 00 00 	mvhi r2,0x0
    16b4:	41 a1 00 01 	lbu r1,(r13+1)
    16b8:	38 42 1b 14 	ori r2,r2,0x1b14
    16bc:	28 4b 00 00 	lw r11,(r2+0)
    16c0:	fb ff fd 70 	calli c80 <uart_putchar>
    16c4:	34 01 00 56 	mvi r1,86
    16c8:	35 6c 00 30 	addi r12,r11,48
    16cc:	e0 00 00 02 	bi 16d4 <_ZN3cam11sendpictureEv+0xb0>
    16d0:	29 61 00 00 	lw r1,(r11+0)

	for(int i = 0;i < 12;i++){
		uart1_putchar(SEND_JPG[i]);
    16d4:	35 6b 00 04 	addi r11,r11,4
    16d8:	20 21 00 ff 	andi r1,r1,0xff
    16dc:	fb ff fd 8c 	calli d0c <uart1_putchar>
	for(int i = 0;i < 12;i++){
    16e0:	5d 8b ff fc 	bne r12,r11,16d0 <_ZN3cam11sendpictureEv+0xac>

	}

	uart1_putchar(X[7]);
    16e4:	21 c1 00 ff 	andi r1,r14,0xff
    16e8:	fb ff fd 89 	calli d0c <uart1_putchar>
	uart1_putchar(X[8]);
    16ec:	21 e1 00 ff 	andi r1,r15,0xff
    16f0:	fb ff fd 87 	calli d0c <uart1_putchar>
	uart1_putchar(0x00);
    16f4:	34 01 00 00 	mvi r1,0
    16f8:	fb ff fd 85 	calli d0c <uart1_putchar>
	uart1_putchar(0x0a);
    16fc:	34 01 00 0a 	mvi r1,10
    1700:	37 8d 00 1c 	addi r13,sp,28
    1704:	fb ff fd 82 	calli d0c <uart1_putchar>
    1708:	37 8c 00 30 	addi r12,sp,48
    170c:	b9 a0 58 00 	mv r11,r13

	for(int i = 0;i < 5;i++){
		Z[i] = uart1_getchar();
    1710:	fb ff fd 75 	calli ce4 <uart1_getchar>
    1714:	59 61 00 00 	sw (r11+0),r1
    1718:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 5;i++){
    171c:	5d 8b ff fd 	bne r12,r11,1710 <_ZN3cam11sendpictureEv+0xec>
	}

	if(Z[0] == 0x76 && Z[2] == 0x32){
    1720:	2b 82 00 1c 	lw r2,(sp+28)
    1724:	34 01 00 76 	mvi r1,118
    1728:	44 41 00 10 	be r2,r1,1768 <_ZN3cam11sendpictureEv+0x144>
		uart_putstr("Sent");
		}
		
	}

};
    172c:	2b 9d 00 04 	lw ra,(sp+4)
    1730:	2b 8b 00 18 	lw r11,(sp+24)
    1734:	2b 8c 00 14 	lw r12,(sp+20)
    1738:	2b 8d 00 10 	lw r13,(sp+16)
    173c:	2b 8e 00 0c 	lw r14,(sp+12)
    1740:	2b 8f 00 08 	lw r15,(sp+8)
    1744:	37 9c 00 60 	addi sp,sp,96
    1748:	c3 a0 00 00 	ret
	if(X[0] == 0x76 && X[2] == 0x34){
    174c:	2b 82 00 48 	lw r2,(sp+72)
    1750:	34 01 00 34 	mvi r1,52
    1754:	5c 41 ff d5 	bne r2,r1,16a8 <_ZN3cam11sendpictureEv+0x84>
		xh = X[7];
    1758:	21 c1 00 ff 	andi r1,r14,0xff
    175c:	31 a1 00 00 	sb (r13+0),r1
		xl = X[8];
    1760:	31 af 00 01 	sb (r13+1),r15
    1764:	e3 ff ff d2 	bi 16ac <_ZN3cam11sendpictureEv+0x88>
	if(Z[0] == 0x76 && Z[2] == 0x32){
    1768:	2b 82 00 24 	lw r2,(sp+36)
    176c:	34 01 00 32 	mvi r1,50
    1770:	5c 41 ff ef 	bne r2,r1,172c <_ZN3cam11sendpictureEv+0x108>
		for(uint32_t i = 0;i < (X[7]*256 + X[8]);i++){
    1774:	3d cb 00 08 	sli r11,r14,8
    1778:	34 0e 00 00 	mvi r14,0
    177c:	b5 6f 58 00 	add r11,r11,r15
    1780:	45 60 00 05 	be r11,r0,1794 <_ZN3cam11sendpictureEv+0x170>
    1784:	35 ce 00 01 	addi r14,r14,1
			R1 = uart1_getchar();
    1788:	fb ff fd 57 	calli ce4 <uart1_getchar>
			uart_putchar(R1);
    178c:	fb ff fd 3d 	calli c80 <uart_putchar>
		for(uint32_t i = 0;i < (X[7]*256 + X[8]);i++){
    1790:	5d 6e ff fd 	bne r11,r14,1784 <_ZN3cam11sendpictureEv+0x160>
			Z[i] = uart1_getchar();
    1794:	fb ff fd 54 	calli ce4 <uart1_getchar>
    1798:	59 a1 00 00 	sw (r13+0),r1
    179c:	35 ad 00 04 	addi r13,r13,4
		for(int i = 0;i < 5;i++){
    17a0:	5d 8d ff fd 	bne r12,r13,1794 <_ZN3cam11sendpictureEv+0x170>
		if(Z[0] == 0x76 && Z[2] == 0x32){
    17a4:	2b 82 00 1c 	lw r2,(sp+28)
    17a8:	34 01 00 76 	mvi r1,118
    17ac:	5c 41 ff e0 	bne r2,r1,172c <_ZN3cam11sendpictureEv+0x108>
    17b0:	2b 82 00 24 	lw r2,(sp+36)
    17b4:	34 01 00 32 	mvi r1,50
    17b8:	5c 41 ff dd 	bne r2,r1,172c <_ZN3cam11sendpictureEv+0x108>
		uart_putstr("Sent");
    17bc:	78 02 00 00 	mvhi r2,0x0
    17c0:	38 42 1b 18 	ori r2,r2,0x1b18
    17c4:	28 41 00 00 	lw r1,(r2+0)
    17c8:	fb ff fd 38 	calli ca8 <uart_putstr>
};
    17cc:	e3 ff ff d8 	bi 172c <_ZN3cam11sendpictureEv+0x108>

000017d0 <_ZN3cam10stoptakingEv>:

void cam::stoptaking(){
    17d0:	37 9c ff e0 	addi sp,sp,-32
    17d4:	5b 8b 00 0c 	sw (sp+12),r11
    17d8:	5b 8c 00 08 	sw (sp+8),r12
    17dc:	5b 9d 00 04 	sw (sp+4),ra

	uint32_t Z [5];

	for(int i = 0;i < 5;i++){
		uart1_putchar(STOP_TAKING_PICS[i]);
    17e0:	78 01 00 00 	mvhi r1,0x0
    17e4:	38 21 1b 1c 	ori r1,r1,0x1b1c
    17e8:	28 2b 00 00 	lw r11,(r1+0)
void cam::stoptaking(){
    17ec:	34 01 00 56 	mvi r1,86
		uart1_putchar(STOP_TAKING_PICS[i]);
    17f0:	20 21 00 ff 	andi r1,r1,0xff
    17f4:	35 6c 00 14 	addi r12,r11,20
    17f8:	35 6b 00 04 	addi r11,r11,4
    17fc:	fb ff fd 44 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1800:	45 6c 00 06 	be r11,r12,1818 <_ZN3cam10stoptakingEv+0x48>
    1804:	29 61 00 00 	lw r1,(r11+0)
		uart1_putchar(STOP_TAKING_PICS[i]);
    1808:	35 6b 00 04 	addi r11,r11,4
    180c:	20 21 00 ff 	andi r1,r1,0xff
    1810:	fb ff fd 3f 	calli d0c <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1814:	5d 6c ff fc 	bne r11,r12,1804 <_ZN3cam10stoptakingEv+0x34>
    1818:	37 8b 00 10 	addi r11,sp,16
    181c:	37 8c 00 24 	addi r12,sp,36
	}

	for(int i = 0;i < 5;i++){
		Z[i] = uart1_getchar();
    1820:	fb ff fd 31 	calli ce4 <uart1_getchar>
    1824:	59 61 00 00 	sw (r11+0),r1
    1828:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 5;i++){
    182c:	5d 6c ff fd 	bne r11,r12,1820 <_ZN3cam10stoptakingEv+0x50>
	}


	if(Z[0] == 0x76 && Z[2] == 0x36){
    1830:	2b 82 00 10 	lw r2,(sp+16)
    1834:	34 01 00 76 	mvi r1,118
    1838:	44 41 00 06 	be r2,r1,1850 <_ZN3cam10stoptakingEv+0x80>
		uart_putstr("Finish");
	}

};
    183c:	2b 9d 00 04 	lw ra,(sp+4)
    1840:	2b 8b 00 0c 	lw r11,(sp+12)
    1844:	2b 8c 00 08 	lw r12,(sp+8)
    1848:	37 9c 00 20 	addi sp,sp,32
    184c:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x36){
    1850:	2b 82 00 18 	lw r2,(sp+24)
    1854:	34 01 00 36 	mvi r1,54
    1858:	5c 41 ff f9 	bne r2,r1,183c <_ZN3cam10stoptakingEv+0x6c>
		uart_putstr("Finish");
    185c:	78 02 00 00 	mvhi r2,0x0
    1860:	38 42 1b 20 	ori r2,r2,0x1b20
    1864:	28 41 00 00 	lw r1,(r2+0)
    1868:	fb ff fd 10 	calli ca8 <uart_putstr>
};
    186c:	e3 ff ff f4 	bi 183c <_ZN3cam10stoptakingEv+0x6c>
